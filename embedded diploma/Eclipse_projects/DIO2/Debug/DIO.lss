
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00002ae4  00002b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800090  00800090  00002ba8  2**0
                  ALLOC
  3 .stab         0000342c  00000000  00000000  00002ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001795  00000000  00000000  00005fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007769  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000078a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009662  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a54d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b2fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b45c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000beb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__vector_1>
       8:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_2>
       c:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_6>
      1c:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__vector_7>
      20:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__vector_8>
      24:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__vector_9>
      28:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__vector_10>
      2c:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <main>
      8a:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:

/*global variable to hold the ADC peripheral busy state*/
static uint8 ADC_u8BusyState = IDLE;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
#if ADC_u8_REF_SELECTION == AREF
	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);
#elif ADC_u8_REF_SELECTION == AVCC
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
#else
#error "Wrong ADC_u8_REF_SELECTION Configuration option"
#endif

#if ADC_u8_RESOLUTION == EIGHT_BIT
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#else
#error "Wrong ADC_u8_REF_RESOLUTION Configuration option"
#endif

ADCSRA &= PRESCALAR_BIT_MASK;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
ADCSRA |= ADC_u8_PRESCALER;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8c 93       	st	X, r24

#if ADC_u8_ENABLE_INIT_STATE == ENABLED
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b92:	a6 e2       	ldi	r26, 0x26	; 38
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e6 e2       	ldi	r30, 0x26	; 38
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	8c 93       	st	X, r24
#elif ADC_u8_ENABLE_INIT_STATE == DISABLED
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
#else
#error "Wrong ADC_u8_ENABLE_INIT_STATE Configuration option"
#endif
}
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <ADC_voidEnable>:
void ADC_voidEnable(void)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     bae:	a6 e2       	ldi	r26, 0x26	; 38
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e6 e2       	ldi	r30, 0x26	; 38
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	80 68       	ori	r24, 0x80	; 128
     bba:	8c 93       	st	X, r24
}
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <ADC_voidDisable>:
void ADC_voidDisable(void)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
     bca:	a6 e2       	ldi	r26, 0x26	; 38
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e6 e2       	ldi	r30, 0x26	; 38
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8f 77       	andi	r24, 0x7F	; 127
     bd6:	8c 93       	st	X, r24
}
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <ADC_u16StartConversionSync>:
uint8 ADC_u16StartConversionSync(uint8 Copy_u8Channel,uint16* Copy_pu16Result)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	28 97       	sbiw	r28, 0x08	; 8
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	8e 83       	std	Y+6, r24	; 0x06
     bf4:	78 87       	std	Y+8, r23	; 0x08
     bf6:	6f 83       	std	Y+7, r22	; 0x07
	uint8 local_u8ErrorState = OK;
     bf8:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32Countfer = 0;
     bfa:	19 82       	std	Y+1, r1	; 0x01
     bfc:	1a 82       	std	Y+2, r1	; 0x02
     bfe:	1b 82       	std	Y+3, r1	; 0x03
     c00:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_pu16Result != NULL)
     c02:	8f 81       	ldd	r24, Y+7	; 0x07
     c04:	98 85       	ldd	r25, Y+8	; 0x08
     c06:	2f ef       	ldi	r18, 0xFF	; 255
     c08:	8f 3f       	cpi	r24, 0xFF	; 255
     c0a:	92 07       	cpc	r25, r18
     c0c:	09 f4       	brne	.+2      	; 0xc10 <ADC_u16StartConversionSync+0x32>
     c0e:	66 c0       	rjmp	.+204    	; 0xcdc <ADC_u16StartConversionSync+0xfe>
	{
		if(ADC_u8BusyState == IDLE)
     c10:	80 91 90 00 	lds	r24, 0x0090
     c14:	88 23       	and	r24, r24
     c16:	09 f0       	breq	.+2      	; 0xc1a <ADC_u16StartConversionSync+0x3c>
     c18:	5e c0       	rjmp	.+188    	; 0xcd6 <ADC_u16StartConversionSync+0xf8>
		{
			/*ADC is now busy*/
			ADC_u8BusyState = BUSY;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 90 00 	sts	0x0090, r24
			/*select channel ADC0*/
			ADMUX &= CHANNEL_BIT_MASK;
     c20:	a7 e2       	ldi	r26, 0x27	; 39
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e7 e2       	ldi	r30, 0x27	; 39
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 7e       	andi	r24, 0xE0	; 224
     c2c:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
     c2e:	a7 e2       	ldi	r26, 0x27	; 39
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e7 e2       	ldi	r30, 0x27	; 39
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	90 81       	ld	r25, Z
     c38:	8e 81       	ldd	r24, Y+6	; 0x06
     c3a:	89 2b       	or	r24, r25
     c3c:	8c 93       	st	X, r24

			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     c3e:	a6 e2       	ldi	r26, 0x26	; 38
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e6 e2       	ldi	r30, 0x26	; 38
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	80 64       	ori	r24, 0x40	; 64
     c4a:	8c 93       	st	X, r24
     c4c:	0b c0       	rjmp	.+22     	; 0xc64 <ADC_u16StartConversionSync+0x86>

			/*wait (polling) for the conversion complete flag or wait until timeout passes*/
			while((GET_BIT(ADCSRA,ADCSRA_ADIF) == 0) && (Local_u32Countfer != ADC_u32_TIMEOUT_VALUE))
			{
				Local_u32Countfer++;
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	ab 81       	ldd	r26, Y+3	; 0x03
     c54:	bc 81       	ldd	r27, Y+4	; 0x04
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	a1 1d       	adc	r26, r1
     c5a:	b1 1d       	adc	r27, r1
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	ab 83       	std	Y+3, r26	; 0x03
     c62:	bc 83       	std	Y+4, r27	; 0x04

			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);

			/*wait (polling) for the conversion complete flag or wait until timeout passes*/
			while((GET_BIT(ADCSRA,ADCSRA_ADIF) == 0) && (Local_u32Countfer != ADC_u32_TIMEOUT_VALUE))
     c64:	e6 e2       	ldi	r30, 0x26	; 38
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	82 95       	swap	r24
     c6c:	8f 70       	andi	r24, 0x0F	; 15
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	81 70       	andi	r24, 0x01	; 1
     c74:	90 70       	andi	r25, 0x00	; 0
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	61 f4       	brne	.+24     	; 0xc92 <ADC_u16StartConversionSync+0xb4>
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	ab 81       	ldd	r26, Y+3	; 0x03
     c80:	bc 81       	ldd	r27, Y+4	; 0x04
     c82:	84 3f       	cpi	r24, 0xF4	; 244
     c84:	21 e0       	ldi	r18, 0x01	; 1
     c86:	92 07       	cpc	r25, r18
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	a2 07       	cpc	r26, r18
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	b2 07       	cpc	r27, r18
     c90:	f1 f6       	brne	.-68     	; 0xc4e <ADC_u16StartConversionSync+0x70>
			{
				Local_u32Countfer++;
			}
			if(Local_u32Countfer == ADC_u32_TIMEOUT_VALUE)
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	ab 81       	ldd	r26, Y+3	; 0x03
     c98:	bc 81       	ldd	r27, Y+4	; 0x04
     c9a:	84 3f       	cpi	r24, 0xF4	; 244
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	92 07       	cpc	r25, r18
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	a2 07       	cpc	r26, r18
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	b2 07       	cpc	r27, r18
     ca8:	19 f4       	brne	.+6      	; 0xcb0 <ADC_u16StartConversionSync+0xd2>
			{
				/*loop is broken because timeout passed without flag*/
				local_u8ErrorState = TIMEOUT_ERR;
     caa:	85 e0       	ldi	r24, 0x05	; 5
     cac:	8d 83       	std	Y+5, r24	; 0x05
     cae:	18 c0       	rjmp	.+48     	; 0xce0 <ADC_u16StartConversionSync+0x102>
			}
			else
			{
				/*flag is raised before timeout*/
				/*Clear the conversion complete flag*/
				SET_BIT(ADCSRA,ADCSRA_ADIF);
     cb0:	a6 e2       	ldi	r26, 0x26	; 38
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e6 e2       	ldi	r30, 0x26	; 38
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	80 61       	ori	r24, 0x10	; 16
     cbc:	8c 93       	st	X, r24

			#if ADC_u8_RESOLUTION == EIGHT_BIT
				*Copy_pu16Result = ADCH;
     cbe:	e5 e2       	ldi	r30, 0x25	; 37
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	ef 81       	ldd	r30, Y+7	; 0x07
     cca:	f8 85       	ldd	r31, Y+8	; 0x08
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	80 83       	st	Z, r24
			#elif ADC_u8_RESOLUTION == TEN_BIT
				*Copy_pu16Result = ADC;
			#endif

				/*ADC is now IDLE*/
				ADC_u8BusyState = IDLE;
     cd0:	10 92 90 00 	sts	0x0090, r1
     cd4:	05 c0       	rjmp	.+10     	; 0xce0 <ADC_u16StartConversionSync+0x102>
			}
		}
		else
		{
			local_u8ErrorState = BUSY_ERR;
     cd6:	86 e0       	ldi	r24, 0x06	; 6
     cd8:	8d 83       	std	Y+5, r24	; 0x05
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <ADC_u16StartConversionSync+0x102>
		}
	}
	else
	{
		local_u8ErrorState = NULL_POINTER;
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	8d 83       	std	Y+5, r24	; 0x05
	}
	return local_u8ErrorState;
     ce0:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ce2:	28 96       	adiw	r28, 0x08	; 8
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <ADC_u16StartConversionAsync>:
uint8 ADC_u16StartConversionAsync(uint8 Copy_u8Channel,uint16* Copy_pu16Result,void (*Copy_pvNotificationFunc)(void))
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <ADC_u16StartConversionAsync+0x6>
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <ADC_u16StartConversionAsync+0x8>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <ADC_u16StartConversionAsync+0xa>
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	8a 83       	std	Y+2, r24	; 0x02
     d04:	7c 83       	std	Y+4, r23	; 0x04
     d06:	6b 83       	std	Y+3, r22	; 0x03
     d08:	5e 83       	std	Y+6, r21	; 0x06
     d0a:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Local_u8ErrorState = OK;
     d0c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	2f ef       	ldi	r18, 0xFF	; 255
     d14:	8f 3f       	cpi	r24, 0xFF	; 255
     d16:	92 07       	cpc	r25, r18
     d18:	d1 f1       	breq	.+116    	; 0xd8e <ADC_u16StartConversionAsync+0x9a>
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	2f ef       	ldi	r18, 0xFF	; 255
     d20:	8f 3f       	cpi	r24, 0xFF	; 255
     d22:	92 07       	cpc	r25, r18
     d24:	a1 f1       	breq	.+104    	; 0xd8e <ADC_u16StartConversionAsync+0x9a>
	{
		if(ADC_u8BusyState == IDLE)
     d26:	80 91 90 00 	lds	r24, 0x0090
     d2a:	88 23       	and	r24, r24
     d2c:	69 f5       	brne	.+90     	; 0xd88 <ADC_u16StartConversionAsync+0x94>
		{
			/*ADC is now Busy*/
			ADC_u8BusyState = BUSY;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 90 00 	sts	0x0090, r24

			/*store the address of the notification function globally*/
			ADC_pvNotificationFunc = Copy_pvNotificationFunc;
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	90 93 69 00 	sts	0x0069, r25
     d3c:	80 93 68 00 	sts	0x0068, r24

			/*store the result variable address globally*/
			ADC_pu16Result = Copy_pu16Result;
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	9c 81       	ldd	r25, Y+4	; 0x04
     d44:	90 93 6b 00 	sts	0x006B, r25
     d48:	80 93 6a 00 	sts	0x006A, r24

			/*select channel ADC0*/
			ADMUX &= CHANNEL_BIT_MASK;
     d4c:	a7 e2       	ldi	r26, 0x27	; 39
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e7 e2       	ldi	r30, 0x27	; 39
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	80 7e       	andi	r24, 0xE0	; 224
     d58:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
     d5a:	a7 e2       	ldi	r26, 0x27	; 39
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e7 e2       	ldi	r30, 0x27	; 39
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	90 81       	ld	r25, Z
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	89 2b       	or	r24, r25
     d68:	8c 93       	st	X, r24

			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d6a:	a6 e2       	ldi	r26, 0x26	; 38
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e6 e2       	ldi	r30, 0x26	; 38
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 64       	ori	r24, 0x40	; 64
     d76:	8c 93       	st	X, r24

			/*ADC interrupt enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d78:	a6 e2       	ldi	r26, 0x26	; 38
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e6 e2       	ldi	r30, 0x26	; 38
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	88 60       	ori	r24, 0x08	; 8
     d84:	8c 93       	st	X, r24
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <ADC_u16StartConversionAsync+0x9e>
		}
		else
		{
			Local_u8ErrorState = BUSY_ERR;
     d88:	86 e0       	ldi	r24, 0x06	; 6
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <ADC_u16StartConversionAsync+0x9e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     d92:	89 81       	ldd	r24, Y+1	; 0x01
}
     d94:	26 96       	adiw	r28, 0x06	; 6
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <__vector_16>:

/*ADC ISR*/
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
	/*Get the Conversion Result*/
#if ADC_u8_RESOLUTION == EIGHT_BIT
	*ADC_pu16Result = ADCH;
     dd0:	a0 91 6a 00 	lds	r26, 0x006A
     dd4:	b0 91 6b 00 	lds	r27, 0x006B
     dd8:	e5 e2       	ldi	r30, 0x25	; 37
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	8d 93       	st	X+, r24
     de4:	9c 93       	st	X, r25
#elif ADC_u8_RESOLUTION == TEN_BIT
	*ADC_pu16Result = ADC;
#endif
	/*Disable the ADC interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     de6:	a6 e2       	ldi	r26, 0x26	; 38
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e6 e2       	ldi	r30, 0x26	; 38
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	87 7f       	andi	r24, 0xF7	; 247
     df2:	8c 93       	st	X, r24

	/*ADC is now IDLE*/
	ADC_u8BusyState = IDLE;
     df4:	10 92 90 00 	sts	0x0090, r1

	/*Invoke the callback notification function*/
	if(ADC_pvNotificationFunc != NULL)
     df8:	80 91 68 00 	lds	r24, 0x0068
     dfc:	90 91 69 00 	lds	r25, 0x0069
     e00:	2f ef       	ldi	r18, 0xFF	; 255
     e02:	8f 3f       	cpi	r24, 0xFF	; 255
     e04:	92 07       	cpc	r25, r18
     e06:	29 f0       	breq	.+10     	; 0xe12 <__vector_16+0x6c>
	{
		ADC_pvNotificationFunc();
     e08:	e0 91 68 00 	lds	r30, 0x0068
     e0c:	f0 91 69 00 	lds	r31, 0x0069
     e10:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <SetDataPins>:
#include "CLCD_interface.h"
#include "CLCD_private.h"
#include "CLCD_config.h"

static void SetDataPins(uint8 Copy_u8Data)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	0f 92       	push	r0
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN4,GET_BIT(Copy_u8Data,0));
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	98 2f       	mov	r25, r24
     e48:	91 70       	andi	r25, 0x01	; 1
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	64 e0       	ldi	r22, 0x04	; 4
     e4e:	49 2f       	mov	r20, r25
     e50:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN5,GET_BIT(Copy_u8Data,1));
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	86 95       	lsr	r24
     e58:	98 2f       	mov	r25, r24
     e5a:	91 70       	andi	r25, 0x01	; 1
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	65 e0       	ldi	r22, 0x05	; 5
     e60:	49 2f       	mov	r20, r25
     e62:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN6,GET_BIT(Copy_u8Data,2));
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	86 95       	lsr	r24
     e6a:	86 95       	lsr	r24
     e6c:	98 2f       	mov	r25, r24
     e6e:	91 70       	andi	r25, 0x01	; 1
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	66 e0       	ldi	r22, 0x06	; 6
     e74:	49 2f       	mov	r20, r25
     e76:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN7,GET_BIT(Copy_u8Data,3));
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	86 95       	lsr	r24
     e7e:	86 95       	lsr	r24
     e80:	86 95       	lsr	r24
     e82:	98 2f       	mov	r25, r24
     e84:	91 70       	andi	r25, 0x01	; 1
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	67 e0       	ldi	r22, 0x07	; 7
     e8a:	49 2f       	mov	r20, r25
     e8c:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
}
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <SendEnablePulse>:

static void SendEnablePulse(void){
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	2e 97       	sbiw	r28, 0x0e	; 14
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_E_PIN,DIO_u8_PIN_HIGH);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	41 e0       	ldi	r20, 0x01	; 1
     eb2:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e4       	ldi	r27, 0x40	; 64
     ebe:	8b 87       	std	Y+11, r24	; 0x0b
     ec0:	9c 87       	std	Y+12, r25	; 0x0c
     ec2:	ad 87       	std	Y+13, r26	; 0x0d
     ec4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eca:	8d 85       	ldd	r24, Y+13	; 0x0d
     ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a e7       	ldi	r20, 0x7A	; 122
     ed4:	55 e4       	ldi	r21, 0x45	; 69
     ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	8f 83       	std	Y+7, r24	; 0x07
     ee0:	98 87       	std	Y+8, r25	; 0x08
     ee2:	a9 87       	std	Y+9, r26	; 0x09
     ee4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee6:	6f 81       	ldd	r22, Y+7	; 0x07
     ee8:	78 85       	ldd	r23, Y+8	; 0x08
     eea:	89 85       	ldd	r24, Y+9	; 0x09
     eec:	9a 85       	ldd	r25, Y+10	; 0x0a
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e8       	ldi	r20, 0x80	; 128
     ef4:	5f e3       	ldi	r21, 0x3F	; 63
     ef6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     efa:	88 23       	and	r24, r24
     efc:	2c f4       	brge	.+10     	; 0xf08 <SendEnablePulse+0x70>
		__ticks = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9e 83       	std	Y+6, r25	; 0x06
     f04:	8d 83       	std	Y+5, r24	; 0x05
     f06:	3f c0       	rjmp	.+126    	; 0xf86 <SendEnablePulse+0xee>
	else if (__tmp > 65535)
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	3f ef       	ldi	r19, 0xFF	; 255
     f14:	4f e7       	ldi	r20, 0x7F	; 127
     f16:	57 e4       	ldi	r21, 0x47	; 71
     f18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f1c:	18 16       	cp	r1, r24
     f1e:	4c f5       	brge	.+82     	; 0xf72 <SendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f20:	6b 85       	ldd	r22, Y+11	; 0x0b
     f22:	7c 85       	ldd	r23, Y+12	; 0x0c
     f24:	8d 85       	ldd	r24, Y+13	; 0x0d
     f26:	9e 85       	ldd	r25, Y+14	; 0x0e
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e2       	ldi	r20, 0x20	; 32
     f2e:	51 e4       	ldi	r21, 0x41	; 65
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	8d 83       	std	Y+5, r24	; 0x05
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <SendEnablePulse+0xd0>
     f4a:	80 e9       	ldi	r24, 0x90	; 144
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <SendEnablePulse+0xbe>
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	9e 83       	std	Y+6, r25	; 0x06
     f66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	69 f7       	brne	.-38     	; 0xf4a <SendEnablePulse+0xb2>
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <SendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <SendEnablePulse+0xfa>
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_E_PIN,DIO_u8_PIN_LOW);
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
}
     fa4:	2e 96       	adiw	r28, 0x0e	; 14
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(uint8 Copy_u8Command)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	0f 92       	push	r0
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	89 83       	std	Y+1, r24	; 0x01
	/*Set Rs pin to low for command*/
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RS_PIN,DIO_u8_PIN_LOW);
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>

	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RW_PIN,DIO_u8_PIN_LOW);
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	62 e0       	ldi	r22, 0x02	; 2
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
	/*send the command*/
	DIO_u8SetPortValue(CLCD_u8_DATA_PORT,Copy_u8Command);

	SendEnablePulse();
#elif CLCD_u8_MODE == FOUR_BIT
	SetDataPins(Copy_u8Command >> 4);
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	82 95       	swap	r24
     fda:	8f 70       	andi	r24, 0x0F	; 15
     fdc:	0e 94 1c 07 	call	0xe38	; 0xe38 <SetDataPins>
	SendEnablePulse();
     fe0:	0e 94 4c 07 	call	0xe98	; 0xe98 <SendEnablePulse>
	SetDataPins(Copy_u8Command);
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	0e 94 1c 07 	call	0xe38	; 0xe38 <SetDataPins>
	SendEnablePulse();
     fea:	0e 94 4c 07 	call	0xe98	; 0xe98 <SendEnablePulse>
#endif
}
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data){
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	89 83       	std	Y+1, r24	; 0x01
	/*Set Rs pin to high for Data*/
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RS_PIN,DIO_u8_PIN_HIGH);
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	41 e0       	ldi	r20, 0x01	; 1
    1008:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>

	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RW_PIN,DIO_u8_PIN_LOW);
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	62 e0       	ldi	r22, 0x02	; 2
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
#if CLCD_u8_MODE == EIGHT_BIT
	/*send the command*/
	DIO_u8SetPortValue(CLCD_u8_DATA_PORT,Copy_u8Data);
	SendEnablePulse();
#elif CLCD_u8_MODE == FOUR_BIT
	SetDataPins(Copy_u8Data >> 4);
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	82 95       	swap	r24
    101a:	8f 70       	andi	r24, 0x0F	; 15
    101c:	0e 94 1c 07 	call	0xe38	; 0xe38 <SetDataPins>
	SendEnablePulse();
    1020:	0e 94 4c 07 	call	0xe98	; 0xe98 <SendEnablePulse>
	SetDataPins(Copy_u8Data);
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	0e 94 1c 07 	call	0xe38	; 0xe38 <SetDataPins>
	SendEnablePulse();
    102a:	0e 94 4c 07 	call	0xe98	; 0xe98 <SendEnablePulse>
#endif

}
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <CLCD_voidInit>:

void CLCD_voidInit(void){
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	2e 97       	sbiw	r28, 0x0e	; 14
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 e2       	ldi	r26, 0x20	; 32
    1050:	b2 e4       	ldi	r27, 0x42	; 66
    1052:	8b 87       	std	Y+11, r24	; 0x0b
    1054:	9c 87       	std	Y+12, r25	; 0x0c
    1056:	ad 87       	std	Y+13, r26	; 0x0d
    1058:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105a:	6b 85       	ldd	r22, Y+11	; 0x0b
    105c:	7c 85       	ldd	r23, Y+12	; 0x0c
    105e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1060:	9e 85       	ldd	r25, Y+14	; 0x0e
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	4a e7       	ldi	r20, 0x7A	; 122
    1068:	55 e4       	ldi	r21, 0x45	; 69
    106a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	8f 83       	std	Y+7, r24	; 0x07
    1074:	98 87       	std	Y+8, r25	; 0x08
    1076:	a9 87       	std	Y+9, r26	; 0x09
    1078:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    107a:	6f 81       	ldd	r22, Y+7	; 0x07
    107c:	78 85       	ldd	r23, Y+8	; 0x08
    107e:	89 85       	ldd	r24, Y+9	; 0x09
    1080:	9a 85       	ldd	r25, Y+10	; 0x0a
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e8       	ldi	r20, 0x80	; 128
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    108e:	88 23       	and	r24, r24
    1090:	2c f4       	brge	.+10     	; 0x109c <CLCD_voidInit+0x66>
		__ticks = 1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
    109a:	3f c0       	rjmp	.+126    	; 0x111a <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    109c:	6f 81       	ldd	r22, Y+7	; 0x07
    109e:	78 85       	ldd	r23, Y+8	; 0x08
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	3f ef       	ldi	r19, 0xFF	; 255
    10a8:	4f e7       	ldi	r20, 0x7F	; 127
    10aa:	57 e4       	ldi	r21, 0x47	; 71
    10ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b0:	18 16       	cp	r1, r24
    10b2:	4c f5       	brge	.+82     	; 0x1106 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e2       	ldi	r20, 0x20	; 32
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	9e 83       	std	Y+6, r25	; 0x06
    10da:	8d 83       	std	Y+5, r24	; 0x05
    10dc:	0f c0       	rjmp	.+30     	; 0x10fc <CLCD_voidInit+0xc6>
    10de:	80 e9       	ldi	r24, 0x90	; 144
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	9c 83       	std	Y+4, r25	; 0x04
    10e4:	8b 83       	std	Y+3, r24	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <CLCD_voidInit+0xb4>
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	69 f7       	brne	.-38     	; 0x10de <CLCD_voidInit+0xa8>
    1104:	14 c0       	rjmp	.+40     	; 0x112e <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <CLCD_voidInit+0xf0>
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
#if CLCD_u8_MODE == EIGHT_BIT
	/*Function set command : 2 lines , font size : 5*7*/
	CLCD_voidSendCommand(0b00111000);
#elif CLCD_u8_MODE == FOUR_BIT
	SetDataPins(0b0010);
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	0e 94 1c 07 	call	0xe38	; 0xe38 <SetDataPins>
	SendEnablePulse();
    1134:	0e 94 4c 07 	call	0xe98	; 0xe98 <SendEnablePulse>
	SetDataPins(0b0010);
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	0e 94 1c 07 	call	0xe38	; 0xe38 <SetDataPins>
	SendEnablePulse();
    113e:	0e 94 4c 07 	call	0xe98	; 0xe98 <SendEnablePulse>
	SetDataPins(0b1000);
    1142:	88 e0       	ldi	r24, 0x08	; 8
    1144:	0e 94 1c 07 	call	0xe38	; 0xe38 <SetDataPins>
	SendEnablePulse();
    1148:	0e 94 4c 07 	call	0xe98	; 0xe98 <SendEnablePulse>
#endif
	/*Function set command :  display on , cursor off , blink cursor off*/
	CLCD_voidSendCommand(0b00001100);
    114c:	8c e0       	ldi	r24, 0x0C	; 12
    114e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <CLCD_voidSendCommand>
	/*Clear LCD*/
	CLCD_voidSendCommand(1);
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	0e 94 db 07 	call	0xfb6	; 0xfb6 <CLCD_voidSendCommand>
}
    1158:	2e 96       	adiw	r28, 0x0e	; 14
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <CLCD_sendString>:

uint8 CLCD_sendString(char Copy_u8StringArray[]){
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <CLCD_sendString+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <CLCD_sendString+0x8>
    1172:	0f 92       	push	r0
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	9d 83       	std	Y+5, r25	; 0x05
    117a:	8c 83       	std	Y+4, r24	; 0x04
	uint8 Local_u8ErrorState = OK;
    117c:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_u8StringArray == NULL){
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	9d 81       	ldd	r25, Y+5	; 0x05
    1182:	2f ef       	ldi	r18, 0xFF	; 255
    1184:	8f 3f       	cpi	r24, 0xFF	; 255
    1186:	92 07       	cpc	r25, r18
    1188:	19 f4       	brne	.+6      	; 0x1190 <CLCD_sendString+0x26>
		Local_u8ErrorState = NULL_POINTER;
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	8b 83       	std	Y+3, r24	; 0x03
    118e:	1c c0       	rjmp	.+56     	; 0x11c8 <CLCD_sendString+0x5e>
	}else{
		for(int i = 0 ; Copy_u8StringArray[i] != '\0' ; i++){
    1190:	1a 82       	std	Y+2, r1	; 0x02
    1192:	19 82       	std	Y+1, r1	; 0x01
    1194:	0f c0       	rjmp	.+30     	; 0x11b4 <CLCD_sendString+0x4a>
			CLCD_voidSendData(Copy_u8StringArray[i]);
    1196:	29 81       	ldd	r18, Y+1	; 0x01
    1198:	3a 81       	ldd	r19, Y+2	; 0x02
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	9d 81       	ldd	r25, Y+5	; 0x05
    119e:	fc 01       	movw	r30, r24
    11a0:	e2 0f       	add	r30, r18
    11a2:	f3 1f       	adc	r31, r19
    11a4:	80 81       	ld	r24, Z
    11a6:	0e 94 fb 07 	call	0xff6	; 0xff6 <CLCD_voidSendData>
uint8 CLCD_sendString(char Copy_u8StringArray[]){
	uint8 Local_u8ErrorState = OK;
	if(Copy_u8StringArray == NULL){
		Local_u8ErrorState = NULL_POINTER;
	}else{
		for(int i = 0 ; Copy_u8StringArray[i] != '\0' ; i++){
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	9a 83       	std	Y+2, r25	; 0x02
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	29 81       	ldd	r18, Y+1	; 0x01
    11b6:	3a 81       	ldd	r19, Y+2	; 0x02
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	fc 01       	movw	r30, r24
    11be:	e2 0f       	add	r30, r18
    11c0:	f3 1f       	adc	r31, r19
    11c2:	80 81       	ld	r24, Z
    11c4:	88 23       	and	r24, r24
    11c6:	39 f7       	brne	.-50     	; 0x1196 <CLCD_sendString+0x2c>
			CLCD_voidSendData(Copy_u8StringArray[i]);
		}
	}

	return Local_u8ErrorState;
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <CLCD_sendNumebr>:

uint8 CLCD_sendNumebr(uint32 Copy_u8Number){
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	2a 97       	sbiw	r28, 0x0a	; 10
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	6f 83       	std	Y+7, r22	; 0x07
    11f0:	78 87       	std	Y+8, r23	; 0x08
    11f2:	89 87       	std	Y+9, r24	; 0x09
    11f4:	9a 87       	std	Y+10, r25	; 0x0a

	uint8 Local_u8ErrorState = OK;
    11f6:	1e 82       	std	Y+6, r1	; 0x06
	if(Copy_u8Number == 0)
    11f8:	8f 81       	ldd	r24, Y+7	; 0x07
    11fa:	98 85       	ldd	r25, Y+8	; 0x08
    11fc:	a9 85       	ldd	r26, Y+9	; 0x09
    11fe:	ba 85       	ldd	r27, Y+10	; 0x0a
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	a1 05       	cpc	r26, r1
    1204:	b1 05       	cpc	r27, r1
    1206:	21 f4       	brne	.+8      	; 0x1210 <CLCD_sendNumebr+0x36>
	{
		CLCD_voidSendData('0');
    1208:	80 e3       	ldi	r24, 0x30	; 48
    120a:	0e 94 fb 07 	call	0xff6	; 0xff6 <CLCD_voidSendData>
    120e:	7c c0       	rjmp	.+248    	; 0x1308 <CLCD_sendNumebr+0x12e>
	}
	else
	{
		uint32 Local_u8Inverter = 0;
    1210:	1a 82       	std	Y+2, r1	; 0x02
    1212:	1b 82       	std	Y+3, r1	; 0x03
    1214:	1c 82       	std	Y+4, r1	; 0x04
    1216:	1d 82       	std	Y+5, r1	; 0x05

		//this is iterator to solve problem of 12500 (zero)
		uint8 Local_u8Iterator = 0;
    1218:	19 82       	std	Y+1, r1	; 0x01
    121a:	43 c0       	rjmp	.+134    	; 0x12a2 <CLCD_sendNumebr+0xc8>

		while(Copy_u8Number != 0)
		{
			Local_u8Inverter *= 10;
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	9b 81       	ldd	r25, Y+3	; 0x03
    1220:	ac 81       	ldd	r26, Y+4	; 0x04
    1222:	bd 81       	ldd	r27, Y+5	; 0x05
    1224:	2a e0       	ldi	r18, 0x0A	; 10
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__mulsi3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	8a 83       	std	Y+2, r24	; 0x02
    123a:	9b 83       	std	Y+3, r25	; 0x03
    123c:	ac 83       	std	Y+4, r26	; 0x04
    123e:	bd 83       	std	Y+5, r27	; 0x05
			Local_u8Inverter += (Copy_u8Number % 10);
    1240:	8f 81       	ldd	r24, Y+7	; 0x07
    1242:	98 85       	ldd	r25, Y+8	; 0x08
    1244:	a9 85       	ldd	r26, Y+9	; 0x09
    1246:	ba 85       	ldd	r27, Y+10	; 0x0a
    1248:	2a e0       	ldi	r18, 0x0A	; 10
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	bc 01       	movw	r22, r24
    1252:	cd 01       	movw	r24, r26
    1254:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__udivmodsi4>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	9c 01       	movw	r18, r24
    125e:	ad 01       	movw	r20, r26
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	9b 81       	ldd	r25, Y+3	; 0x03
    1264:	ac 81       	ldd	r26, Y+4	; 0x04
    1266:	bd 81       	ldd	r27, Y+5	; 0x05
    1268:	82 0f       	add	r24, r18
    126a:	93 1f       	adc	r25, r19
    126c:	a4 1f       	adc	r26, r20
    126e:	b5 1f       	adc	r27, r21
    1270:	8a 83       	std	Y+2, r24	; 0x02
    1272:	9b 83       	std	Y+3, r25	; 0x03
    1274:	ac 83       	std	Y+4, r26	; 0x04
    1276:	bd 83       	std	Y+5, r27	; 0x05
			Copy_u8Number /= 10;
    1278:	8f 81       	ldd	r24, Y+7	; 0x07
    127a:	98 85       	ldd	r25, Y+8	; 0x08
    127c:	a9 85       	ldd	r26, Y+9	; 0x09
    127e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1280:	2a e0       	ldi	r18, 0x0A	; 10
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	bc 01       	movw	r22, r24
    128a:	cd 01       	movw	r24, r26
    128c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__udivmodsi4>
    1290:	da 01       	movw	r26, r20
    1292:	c9 01       	movw	r24, r18
    1294:	8f 83       	std	Y+7, r24	; 0x07
    1296:	98 87       	std	Y+8, r25	; 0x08
    1298:	a9 87       	std	Y+9, r26	; 0x09
    129a:	ba 87       	std	Y+10, r27	; 0x0a
			Local_u8Iterator++;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	89 83       	std	Y+1, r24	; 0x01
		uint32 Local_u8Inverter = 0;

		//this is iterator to solve problem of 12500 (zero)
		uint8 Local_u8Iterator = 0;

		while(Copy_u8Number != 0)
    12a2:	8f 81       	ldd	r24, Y+7	; 0x07
    12a4:	98 85       	ldd	r25, Y+8	; 0x08
    12a6:	a9 85       	ldd	r26, Y+9	; 0x09
    12a8:	ba 85       	ldd	r27, Y+10	; 0x0a
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	a1 05       	cpc	r26, r1
    12ae:	b1 05       	cpc	r27, r1
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <CLCD_sendNumebr+0xda>
    12b2:	b4 cf       	rjmp	.-152    	; 0x121c <CLCD_sendNumebr+0x42>
    12b4:	26 c0       	rjmp	.+76     	; 0x1302 <CLCD_sendNumebr+0x128>
			Copy_u8Number /= 10;
			Local_u8Iterator++;
		}
		for(;Local_u8Iterator > 0 ; Local_u8Iterator--)
		{
			CLCD_voidSendData((Local_u8Inverter % 10) + '0');
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	ac 81       	ldd	r26, Y+4	; 0x04
    12bc:	bd 81       	ldd	r27, Y+5	; 0x05
    12be:	2a e0       	ldi	r18, 0x0A	; 10
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__udivmodsi4>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	80 5d       	subi	r24, 0xD0	; 208
    12d4:	0e 94 fb 07 	call	0xff6	; 0xff6 <CLCD_voidSendData>
			Local_u8Inverter /= 10;
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	9b 81       	ldd	r25, Y+3	; 0x03
    12dc:	ac 81       	ldd	r26, Y+4	; 0x04
    12de:	bd 81       	ldd	r27, Y+5	; 0x05
    12e0:	2a e0       	ldi	r18, 0x0A	; 10
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__udivmodsi4>
    12f0:	da 01       	movw	r26, r20
    12f2:	c9 01       	movw	r24, r18
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	9b 83       	std	Y+3, r25	; 0x03
    12f8:	ac 83       	std	Y+4, r26	; 0x04
    12fa:	bd 83       	std	Y+5, r27	; 0x05
			Local_u8Inverter *= 10;
			Local_u8Inverter += (Copy_u8Number % 10);
			Copy_u8Number /= 10;
			Local_u8Iterator++;
		}
		for(;Local_u8Iterator > 0 ; Local_u8Iterator--)
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	81 50       	subi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	88 23       	and	r24, r24
    1306:	b9 f6       	brne	.-82     	; 0x12b6 <CLCD_sendNumebr+0xdc>
			CLCD_voidSendData((Local_u8Inverter % 10) + '0');
			Local_u8Inverter /= 10;
		}
	}

	return Local_u8ErrorState;
    1308:	8e 81       	ldd	r24, Y+6	; 0x06
}
    130a:	2a 96       	adiw	r28, 0x0a	; 10
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 Copy_u8XPos , uint8 Copy_YPos){
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <CLCD_voidGoToXY+0x6>
    1322:	0f 92       	push	r0
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	8a 83       	std	Y+2, r24	; 0x02
    132a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Add;
	if(Copy_YPos == 0)
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 23       	and	r24, r24
    1330:	19 f4       	brne	.+6      	; 0x1338 <CLCD_voidGoToXY+0x1c>
		Local_u8Add = Copy_u8XPos;
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <CLCD_voidGoToXY+0x28>
	else if(Copy_YPos == 1)
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	19 f4       	brne	.+6      	; 0x1344 <CLCD_voidGoToXY+0x28>
		Local_u8Add = Copy_u8XPos + 0x40;
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	80 5c       	subi	r24, 0xC0	; 192
    1342:	89 83       	std	Y+1, r24	; 0x01

	/*Set bit number 7 for Set DDRAM Address*/
	SET_BIT(Local_u8Add,7);
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	80 68       	ori	r24, 0x80	; 128
    1348:	89 83       	std	Y+1, r24	; 0x01

	/*set DDRAM address for command*/
	CLCD_voidSendCommand(Local_u8Add);
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <CLCD_voidSendCommand>
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <CLCD_voidSendSpecialChatacter>:

uint8 CLCD_voidSendSpecialChatacter(uint8* Copy_u8Pattern,uint8 Copy_u8PatternNum,uint8 Copy_u8XPos, uint8 Copy_u8YPos){
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	28 97       	sbiw	r28, 0x08	; 8
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	9d 83       	std	Y+5, r25	; 0x05
    1372:	8c 83       	std	Y+4, r24	; 0x04
    1374:	6e 83       	std	Y+6, r22	; 0x06
    1376:	4f 83       	std	Y+7, r20	; 0x07
    1378:	28 87       	std	Y+8, r18	; 0x08
	uint8 Local_u8ErrorState = OK;
    137a:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_u8Pattern != NULL)
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	2f ef       	ldi	r18, 0xFF	; 255
    1382:	8f 3f       	cpi	r24, 0xFF	; 255
    1384:	92 07       	cpc	r25, r18
    1386:	59 f1       	breq	.+86     	; 0x13de <CLCD_voidSendSpecialChatacter+0x82>
	{
		uint8 Local_u8Counter;
		uint8 Local_u8Add = Copy_u8PatternNum * 8;
    1388:	8e 81       	ldd	r24, Y+6	; 0x06
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_u8Add,6); //set bit number 6 for set CGRAM address Command
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	80 64       	ori	r24, 0x40	; 64
    13a0:	89 83       	std	Y+1, r24	; 0x01

		CLCD_voidSendCommand(Local_u8Add); // Set CGRAM address command
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <CLCD_voidSendCommand>
		/*Draw the pattern inside CGRAM*/
		for(Local_u8Counter = 0; Local_u8Counter < 8 ; Local_u8Counter++){
    13a8:	1a 82       	std	Y+2, r1	; 0x02
    13aa:	0e c0       	rjmp	.+28     	; 0x13c8 <CLCD_voidSendSpecialChatacter+0x6c>
			CLCD_voidSendData(Copy_u8Pattern[Local_u8Counter]);
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	8c 81       	ldd	r24, Y+4	; 0x04
    13b4:	9d 81       	ldd	r25, Y+5	; 0x05
    13b6:	fc 01       	movw	r30, r24
    13b8:	e2 0f       	add	r30, r18
    13ba:	f3 1f       	adc	r31, r19
    13bc:	80 81       	ld	r24, Z
    13be:	0e 94 fb 07 	call	0xff6	; 0xff6 <CLCD_voidSendData>
		uint8 Local_u8Add = Copy_u8PatternNum * 8;
		SET_BIT(Local_u8Add,6); //set bit number 6 for set CGRAM address Command

		CLCD_voidSendCommand(Local_u8Add); // Set CGRAM address command
		/*Draw the pattern inside CGRAM*/
		for(Local_u8Counter = 0; Local_u8Counter < 8 ; Local_u8Counter++){
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	8f 5f       	subi	r24, 0xFF	; 255
    13c6:	8a 83       	std	Y+2, r24	; 0x02
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	88 30       	cpi	r24, 0x08	; 8
    13cc:	78 f3       	brcs	.-34     	; 0x13ac <CLCD_voidSendSpecialChatacter+0x50>
			CLCD_voidSendData(Copy_u8Pattern[Local_u8Counter]);
		}

		/*Go back to DDRAM*/
		CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    13ce:	8f 81       	ldd	r24, Y+7	; 0x07
    13d0:	68 85       	ldd	r22, Y+8	; 0x08
    13d2:	0e 94 8e 09 	call	0x131c	; 0x131c <CLCD_voidGoToXY>

		/*Display the drawn pattern*/
		CLCD_voidSendData(Copy_u8PatternNum);
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	0e 94 fb 07 	call	0xff6	; 0xff6 <CLCD_voidSendData>
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <CLCD_voidSendSpecialChatacter+0x86>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_u8ErrorState;
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13e4:	28 96       	adiw	r28, 0x08	; 8
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay()
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(0b00000001);
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	0e 94 db 07 	call	0xfb6	; 0xfb6 <CLCD_voidSendCommand>
}
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_config.h"

//<--------------------PINS & PORTS-------------------->
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	00 d0       	rcall	.+0      	; 0x1410 <DIO_u8SetPinValue+0x6>
    1410:	00 d0       	rcall	.+0      	; 0x1412 <DIO_u8SetPinValue+0x8>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <DIO_u8SetPinValue+0xa>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	8a 83       	std	Y+2, r24	; 0x02
    141a:	6b 83       	std	Y+3, r22	; 0x03
    141c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    141e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PinNum <= DIO_u8_PIN7)&& (Copy_u8Val <= DIO_u8_PIN_HIGH)){
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	88 30       	cpi	r24, 0x08	; 8
    1424:	08 f0       	brcs	.+2      	; 0x1428 <DIO_u8SetPinValue+0x1e>
    1426:	b1 c0       	rjmp	.+354    	; 0x158a <DIO_u8SetPinValue+0x180>
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	82 30       	cpi	r24, 0x02	; 2
    142c:	08 f0       	brcs	.+2      	; 0x1430 <DIO_u8SetPinValue+0x26>
    142e:	ad c0       	rjmp	.+346    	; 0x158a <DIO_u8SetPinValue+0x180>
		switch(Copy_u8Port)
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	3e 83       	std	Y+6, r19	; 0x06
    1438:	2d 83       	std	Y+5, r18	; 0x05
    143a:	6d 81       	ldd	r22, Y+5	; 0x05
    143c:	7e 81       	ldd	r23, Y+6	; 0x06
    143e:	61 30       	cpi	r22, 0x01	; 1
    1440:	71 05       	cpc	r23, r1
    1442:	d1 f1       	breq	.+116    	; 0x14b8 <DIO_u8SetPinValue+0xae>
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	91 05       	cpc	r25, r1
    144c:	34 f4       	brge	.+12     	; 0x145a <DIO_u8SetPinValue+0x50>
    144e:	2d 81       	ldd	r18, Y+5	; 0x05
    1450:	3e 81       	ldd	r19, Y+6	; 0x06
    1452:	21 15       	cp	r18, r1
    1454:	31 05       	cpc	r19, r1
    1456:	71 f0       	breq	.+28     	; 0x1474 <DIO_u8SetPinValue+0x6a>
    1458:	95 c0       	rjmp	.+298    	; 0x1584 <DIO_u8SetPinValue+0x17a>
    145a:	6d 81       	ldd	r22, Y+5	; 0x05
    145c:	7e 81       	ldd	r23, Y+6	; 0x06
    145e:	62 30       	cpi	r22, 0x02	; 2
    1460:	71 05       	cpc	r23, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <DIO_u8SetPinValue+0x5c>
    1464:	4b c0       	rjmp	.+150    	; 0x14fc <DIO_u8SetPinValue+0xf2>
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	91 05       	cpc	r25, r1
    146e:	09 f4       	brne	.+2      	; 0x1472 <DIO_u8SetPinValue+0x68>
    1470:	67 c0       	rjmp	.+206    	; 0x1540 <DIO_u8SetPinValue+0x136>
    1472:	88 c0       	rjmp	.+272    	; 0x1584 <DIO_u8SetPinValue+0x17a>
		{
			case DIO_u8_PORTA : ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
    1474:	ab e3       	ldi	r26, 0x3B	; 59
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	eb e3       	ldi	r30, 0x3B	; 59
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_u8SetPinValue+0x86>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	2a 95       	dec	r18
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_u8SetPinValue+0x82>
    1494:	80 95       	com	r24
    1496:	48 23       	and	r20, r24
    1498:	8c 81       	ldd	r24, Y+4	; 0x04
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	b9 01       	movw	r22, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_u8SetPinValue+0xa2>
    14a8:	66 0f       	add	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	8a 95       	dec	r24
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_u8SetPinValue+0x9e>
    14b0:	cb 01       	movw	r24, r22
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	6b c0       	rjmp	.+214    	; 0x158e <DIO_u8SetPinValue+0x184>
			case DIO_u8_PORTB : ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
    14b8:	a8 e3       	ldi	r26, 0x38	; 56
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e8 e3       	ldi	r30, 0x38	; 56
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_u8SetPinValue+0xca>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	2a 95       	dec	r18
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_u8SetPinValue+0xc6>
    14d8:	80 95       	com	r24
    14da:	48 23       	and	r20, r24
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	b9 01       	movw	r22, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_u8SetPinValue+0xe6>
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_u8SetPinValue+0xe2>
    14f4:	cb 01       	movw	r24, r22
    14f6:	84 2b       	or	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	49 c0       	rjmp	.+146    	; 0x158e <DIO_u8SetPinValue+0x184>
			case DIO_u8_PORTC : ASSIGN_BIT(PORTC,Copy_u8PinNum,Copy_u8Val); break;
    14fc:	a5 e3       	ldi	r26, 0x35	; 53
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e5 e3       	ldi	r30, 0x35	; 53
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_u8SetPinValue+0x10e>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	2a 95       	dec	r18
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <DIO_u8SetPinValue+0x10a>
    151c:	80 95       	com	r24
    151e:	48 23       	and	r20, r24
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	b9 01       	movw	r22, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <DIO_u8SetPinValue+0x12a>
    1530:	66 0f       	add	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <DIO_u8SetPinValue+0x126>
    1538:	cb 01       	movw	r24, r22
    153a:	84 2b       	or	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	27 c0       	rjmp	.+78     	; 0x158e <DIO_u8SetPinValue+0x184>
			case DIO_u8_PORTD : ASSIGN_BIT(PORTD,Copy_u8PinNum,Copy_u8Val); break;
    1540:	a2 e3       	ldi	r26, 0x32	; 50
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e2 e3       	ldi	r30, 0x32	; 50
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_u8SetPinValue+0x152>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	2a 95       	dec	r18
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_u8SetPinValue+0x14e>
    1560:	80 95       	com	r24
    1562:	48 23       	and	r20, r24
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	b9 01       	movw	r22, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <DIO_u8SetPinValue+0x16e>
    1574:	66 0f       	add	r22, r22
    1576:	77 1f       	adc	r23, r23
    1578:	8a 95       	dec	r24
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <DIO_u8SetPinValue+0x16a>
    157c:	cb 01       	movw	r24, r22
    157e:	84 2b       	or	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	05 c0       	rjmp	.+10     	; 0x158e <DIO_u8SetPinValue+0x184>
			default : Local_u8ErrorState = NOK; break;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_u8SetPinValue+0x184>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1590:	26 96       	adiw	r28, 0x06	; 6
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Val)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <DIO_u8SetPortValue+0x6>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <DIO_u8SetPortValue+0x8>
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	8a 83       	std	Y+2, r24	; 0x02
    15b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    15b4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3d 83       	std	Y+5, r19	; 0x05
    15be:	2c 83       	std	Y+4, r18	; 0x04
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	d1 f0       	breq	.+52     	; 0x15fe <DIO_u8SetPortValue+0x5c>
    15ca:	2c 81       	ldd	r18, Y+4	; 0x04
    15cc:	3d 81       	ldd	r19, Y+5	; 0x05
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <DIO_u8SetPortValue+0x3c>
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	61 f0       	breq	.+24     	; 0x15f4 <DIO_u8SetPortValue+0x52>
    15dc:	1f c0       	rjmp	.+62     	; 0x161c <DIO_u8SetPortValue+0x7a>
    15de:	2c 81       	ldd	r18, Y+4	; 0x04
    15e0:	3d 81       	ldd	r19, Y+5	; 0x05
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	81 f0       	breq	.+32     	; 0x1608 <DIO_u8SetPortValue+0x66>
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	81 f0       	breq	.+32     	; 0x1612 <DIO_u8SetPortValue+0x70>
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8_PORTA : PORTA = Copy_u8Val; break;
    15f4:	eb e3       	ldi	r30, 0x3B	; 59
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	80 83       	st	Z, r24
    15fc:	11 c0       	rjmp	.+34     	; 0x1620 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB : PORTB = Copy_u8Val; break;
    15fe:	e8 e3       	ldi	r30, 0x38	; 56
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	80 83       	st	Z, r24
    1606:	0c c0       	rjmp	.+24     	; 0x1620 <DIO_u8SetPortValue+0x7e>
 		case DIO_u8_PORTC : PORTC = Copy_u8Val; break;
    1608:	e5 e3       	ldi	r30, 0x35	; 53
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	80 83       	st	Z, r24
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD : PORTD = Copy_u8Val; break;
    1612:	e2 e3       	ldi	r30, 0x32	; 50
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	80 83       	st	Z, r24
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = NOK; break;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1620:	89 81       	ldd	r24, Y+1	; 0x01
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <DIO_u8ReadPinValue>:

uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum,uint8* Copy_pu8Val)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	27 97       	sbiw	r28, 0x07	; 7
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	6b 83       	std	Y+3, r22	; 0x03
    164a:	5d 83       	std	Y+5, r21	; 0x05
    164c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    164e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PinNum <= DIO_u8_PIN7) && (Copy_pu8Val != NULL)){
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	88 30       	cpi	r24, 0x08	; 8
    1654:	08 f0       	brcs	.+2      	; 0x1658 <DIO_u8ReadPinValue+0x26>
    1656:	7b c0       	rjmp	.+246    	; 0x174e <DIO_u8ReadPinValue+0x11c>
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	2f ef       	ldi	r18, 0xFF	; 255
    165e:	8f 3f       	cpi	r24, 0xFF	; 255
    1660:	92 07       	cpc	r25, r18
    1662:	09 f4       	brne	.+2      	; 0x1666 <DIO_u8ReadPinValue+0x34>
    1664:	74 c0       	rjmp	.+232    	; 0x174e <DIO_u8ReadPinValue+0x11c>
		switch(Copy_u8Port)
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	48 2f       	mov	r20, r24
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	5f 83       	std	Y+7, r21	; 0x07
    166e:	4e 83       	std	Y+6, r20	; 0x06
    1670:	8e 81       	ldd	r24, Y+6	; 0x06
    1672:	9f 81       	ldd	r25, Y+7	; 0x07
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	91 05       	cpc	r25, r1
    1678:	59 f1       	breq	.+86     	; 0x16d0 <DIO_u8ReadPinValue+0x9e>
    167a:	2e 81       	ldd	r18, Y+6	; 0x06
    167c:	3f 81       	ldd	r19, Y+7	; 0x07
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	34 f4       	brge	.+12     	; 0x1690 <DIO_u8ReadPinValue+0x5e>
    1684:	4e 81       	ldd	r20, Y+6	; 0x06
    1686:	5f 81       	ldd	r21, Y+7	; 0x07
    1688:	41 15       	cp	r20, r1
    168a:	51 05       	cpc	r21, r1
    168c:	69 f0       	breq	.+26     	; 0x16a8 <DIO_u8ReadPinValue+0x76>
    168e:	5c c0       	rjmp	.+184    	; 0x1748 <DIO_u8ReadPinValue+0x116>
    1690:	8e 81       	ldd	r24, Y+6	; 0x06
    1692:	9f 81       	ldd	r25, Y+7	; 0x07
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	91 05       	cpc	r25, r1
    1698:	79 f1       	breq	.+94     	; 0x16f8 <DIO_u8ReadPinValue+0xc6>
    169a:	2e 81       	ldd	r18, Y+6	; 0x06
    169c:	3f 81       	ldd	r19, Y+7	; 0x07
    169e:	23 30       	cpi	r18, 0x03	; 3
    16a0:	31 05       	cpc	r19, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <DIO_u8ReadPinValue+0x74>
    16a4:	3d c0       	rjmp	.+122    	; 0x1720 <DIO_u8ReadPinValue+0xee>
    16a6:	50 c0       	rjmp	.+160    	; 0x1748 <DIO_u8ReadPinValue+0x116>
		{
			case DIO_u8_PORTA : *Copy_pu8Val = GET_BIT(PINA,Copy_u8PinNum); break;
    16a8:	e9 e3       	ldi	r30, 0x39	; 57
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a9 01       	movw	r20, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_u8ReadPinValue+0x8e>
    16bc:	55 95       	asr	r21
    16be:	47 95       	ror	r20
    16c0:	8a 95       	dec	r24
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_u8ReadPinValue+0x8a>
    16c4:	ca 01       	movw	r24, r20
    16c6:	81 70       	andi	r24, 0x01	; 1
    16c8:	ec 81       	ldd	r30, Y+4	; 0x04
    16ca:	fd 81       	ldd	r31, Y+5	; 0x05
    16cc:	80 83       	st	Z, r24
    16ce:	4a c0       	rjmp	.+148    	; 0x1764 <DIO_u8ReadPinValue+0x132>
			case DIO_u8_PORTB : *Copy_pu8Val = GET_BIT(PINB,Copy_u8PinNum); break;
    16d0:	e6 e3       	ldi	r30, 0x36	; 54
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a9 01       	movw	r20, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_u8ReadPinValue+0xb6>
    16e4:	55 95       	asr	r21
    16e6:	47 95       	ror	r20
    16e8:	8a 95       	dec	r24
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_u8ReadPinValue+0xb2>
    16ec:	ca 01       	movw	r24, r20
    16ee:	81 70       	andi	r24, 0x01	; 1
    16f0:	ec 81       	ldd	r30, Y+4	; 0x04
    16f2:	fd 81       	ldd	r31, Y+5	; 0x05
    16f4:	80 83       	st	Z, r24
    16f6:	36 c0       	rjmp	.+108    	; 0x1764 <DIO_u8ReadPinValue+0x132>
			case DIO_u8_PORTC : *Copy_pu8Val = GET_BIT(PINC,Copy_u8PinNum); break;
    16f8:	e3 e3       	ldi	r30, 0x33	; 51
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a9 01       	movw	r20, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_u8ReadPinValue+0xde>
    170c:	55 95       	asr	r21
    170e:	47 95       	ror	r20
    1710:	8a 95       	dec	r24
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_u8ReadPinValue+0xda>
    1714:	ca 01       	movw	r24, r20
    1716:	81 70       	andi	r24, 0x01	; 1
    1718:	ec 81       	ldd	r30, Y+4	; 0x04
    171a:	fd 81       	ldd	r31, Y+5	; 0x05
    171c:	80 83       	st	Z, r24
    171e:	22 c0       	rjmp	.+68     	; 0x1764 <DIO_u8ReadPinValue+0x132>
			case DIO_u8_PORTD : *Copy_pu8Val = GET_BIT(PIND,Copy_u8PinNum); break;
    1720:	e0 e3       	ldi	r30, 0x30	; 48
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a9 01       	movw	r20, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_u8ReadPinValue+0x106>
    1734:	55 95       	asr	r21
    1736:	47 95       	ror	r20
    1738:	8a 95       	dec	r24
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <DIO_u8ReadPinValue+0x102>
    173c:	ca 01       	movw	r24, r20
    173e:	81 70       	andi	r24, 0x01	; 1
    1740:	ec 81       	ldd	r30, Y+4	; 0x04
    1742:	fd 81       	ldd	r31, Y+5	; 0x05
    1744:	80 83       	st	Z, r24
    1746:	0e c0       	rjmp	.+28     	; 0x1764 <DIO_u8ReadPinValue+0x132>
			default : Local_u8ErrorState = NOK; break;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	0b c0       	rjmp	.+22     	; 0x1764 <DIO_u8ReadPinValue+0x132>
		}
	}
	else if(Copy_pu8Val == NULL)
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	5f ef       	ldi	r21, 0xFF	; 255
    1754:	8f 3f       	cpi	r24, 0xFF	; 255
    1756:	95 07       	cpc	r25, r21
    1758:	19 f4       	brne	.+6      	; 0x1760 <DIO_u8ReadPinValue+0x12e>
	{
		Local_u8ErrorState  = NULL_POINTER;
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_u8ReadPinValue+0x132>
	}
	else
	{
		Local_u8ErrorState = NOK;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
}
    1766:	27 96       	adiw	r28, 0x07	; 7
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <DIO_u8TogglePinValue+0x6>
    177e:	00 d0       	rcall	.+0      	; 0x1780 <DIO_u8TogglePinValue+0x8>
    1780:	0f 92       	push	r0
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    178a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PinNum <= DIO_u8_PIN7){
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	88 30       	cpi	r24, 0x08	; 8
    1790:	08 f0       	brcs	.+2      	; 0x1794 <DIO_u8TogglePinValue+0x1c>
    1792:	72 c0       	rjmp	.+228    	; 0x1878 <DIO_u8TogglePinValue+0x100>
		switch(Copy_u8Port)
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	3d 83       	std	Y+5, r19	; 0x05
    179c:	2c 83       	std	Y+4, r18	; 0x04
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	9d 81       	ldd	r25, Y+5	; 0x05
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	91 05       	cpc	r25, r1
    17a6:	49 f1       	breq	.+82     	; 0x17fa <DIO_u8TogglePinValue+0x82>
    17a8:	2c 81       	ldd	r18, Y+4	; 0x04
    17aa:	3d 81       	ldd	r19, Y+5	; 0x05
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	2c f4       	brge	.+10     	; 0x17bc <DIO_u8TogglePinValue+0x44>
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	61 f0       	breq	.+24     	; 0x17d2 <DIO_u8TogglePinValue+0x5a>
    17ba:	5b c0       	rjmp	.+182    	; 0x1872 <DIO_u8TogglePinValue+0xfa>
    17bc:	2c 81       	ldd	r18, Y+4	; 0x04
    17be:	3d 81       	ldd	r19, Y+5	; 0x05
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	31 05       	cpc	r19, r1
    17c4:	71 f1       	breq	.+92     	; 0x1822 <DIO_u8TogglePinValue+0xaa>
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ca:	83 30       	cpi	r24, 0x03	; 3
    17cc:	91 05       	cpc	r25, r1
    17ce:	e9 f1       	breq	.+122    	; 0x184a <DIO_u8TogglePinValue+0xd2>
    17d0:	50 c0       	rjmp	.+160    	; 0x1872 <DIO_u8TogglePinValue+0xfa>
		{
			case DIO_u8_PORTA : TOG_BIT(PORTA,Copy_u8PinNum); break;
    17d2:	ab e3       	ldi	r26, 0x3B	; 59
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	eb e3       	ldi	r30, 0x3B	; 59
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_u8TogglePinValue+0x78>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_u8TogglePinValue+0x74>
    17f4:	84 27       	eor	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	41 c0       	rjmp	.+130    	; 0x187c <DIO_u8TogglePinValue+0x104>
			case DIO_u8_PORTB : TOG_BIT(PORTB,Copy_u8PinNum); break;
    17fa:	a8 e3       	ldi	r26, 0x38	; 56
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e8 e3       	ldi	r30, 0x38	; 56
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_u8TogglePinValue+0xa0>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_u8TogglePinValue+0x9c>
    181c:	84 27       	eor	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	2d c0       	rjmp	.+90     	; 0x187c <DIO_u8TogglePinValue+0x104>
			case DIO_u8_PORTC : TOG_BIT(PORTC,Copy_u8PinNum); break;
    1822:	a5 e3       	ldi	r26, 0x35	; 53
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e5 e3       	ldi	r30, 0x35	; 53
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <DIO_u8TogglePinValue+0xc8>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <DIO_u8TogglePinValue+0xc4>
    1844:	84 27       	eor	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	19 c0       	rjmp	.+50     	; 0x187c <DIO_u8TogglePinValue+0x104>
			case DIO_u8_PORTD : TOG_BIT(PORTD,Copy_u8PinNum); break;
    184a:	a2 e3       	ldi	r26, 0x32	; 50
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e2 e3       	ldi	r30, 0x32	; 50
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <DIO_u8TogglePinValue+0xf0>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <DIO_u8TogglePinValue+0xec>
    186c:	84 27       	eor	r24, r20
    186e:	8c 93       	st	X, r24
    1870:	05 c0       	rjmp	.+10     	; 0x187c <DIO_u8TogglePinValue+0x104>
			default : Local_u8ErrorState = NOK; break;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    187c:	89 81       	ldd	r24, Y+1	; 0x01
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <EXTI_voidInit>:

/*GLobal array of pointer to function*/
void (*EXTI_pvCallBackFunc[3])(void) = {NULL,NULL,NULL};

void EXTI_voidInit(void)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,MCUCR_ISC00);
#elif EXTI_u8_INT0_SENSE_CONTROL == FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC01);
	CLR_BIT(MCUCR,MCUCR_ISC00);
#elif EXTI_u8_INT0_SENSE_CONTROL == RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC01);
    1896:	a5 e5       	ldi	r26, 0x55	; 85
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e5 e5       	ldi	r30, 0x55	; 85
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	82 60       	ori	r24, 0x02	; 2
    18a2:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC00);
    18a4:	a5 e5       	ldi	r26, 0x55	; 85
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e5 e5       	ldi	r30, 0x55	; 85
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	81 60       	ori	r24, 0x01	; 1
    18b0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC10);
#elif EXTI_u8_INT1_SENSE_CONTROL == FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC11);
	CLR_BIT(MCUCR,MCUCR_ISC10);
#elif EXTI_u8_INT1_SENSE_CONTROL == RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC11);
    18b2:	a5 e5       	ldi	r26, 0x55	; 85
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 e5       	ldi	r30, 0x55	; 85
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	88 60       	ori	r24, 0x08	; 8
    18be:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC10);
    18c0:	a5 e5       	ldi	r26, 0x55	; 85
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e5 e5       	ldi	r30, 0x55	; 85
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	84 60       	ori	r24, 0x04	; 4
    18cc:	8c 93       	st	X, r24
#endif
/*******************************************************************/
#if EXTI_u8_INT2_SENSE_CONTROL == FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC2);
#elif EXTI_u8_INT2_SENSE_CONTROL == RISING_EDGE
	SET_BIT(MCUCSR,MCUCSR_ISC2);
    18ce:	a4 e5       	ldi	r26, 0x54	; 84
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e4 e5       	ldi	r30, 0x54	; 84
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	80 64       	ori	r24, 0x40	; 64
    18da:	8c 93       	st	X, r24
/*******************************************************************/

#if EXTI_u8_INT0_INIT_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#elif EXTI_u8_INT0_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    18dc:	ab e5       	ldi	r26, 0x5B	; 91
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	eb e5       	ldi	r30, 0x5B	; 91
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	80 64       	ori	r24, 0x40	; 64
    18e8:	8c 93       	st	X, r24
#endif

#if EXTI_u8_INT1_INIT_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT1);
#elif EXTI_u8_INT1_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
    18ea:	ab e5       	ldi	r26, 0x5B	; 91
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e5       	ldi	r30, 0x5B	; 91
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	80 68       	ori	r24, 0x80	; 128
    18f6:	8c 93       	st	X, r24
#endif

#if EXTI_u8_INT2_INIT_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT2);
#elif EXTI_u8_INT2_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2);
    18f8:	ab e5       	ldi	r26, 0x5B	; 91
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	eb e5       	ldi	r30, 0x5B	; 91
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	80 62       	ori	r24, 0x20	; 32
    1904:	8c 93       	st	X, r24
#else
#error "Wrong EXIT_u8_INT2_INIT_SENSE_CONTROL configuration option"
#endif

}
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <EXTI_u8SetSenseControl>:
uint8 EXTI_u8SetSenseControl(uint8 Copy_u8IntNum,uint8 Copy_u8Sense)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	29 97       	sbiw	r28, 0x09	; 9
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	8a 83       	std	Y+2, r24	; 0x02
    1922:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1924:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8IntNum == EXTI_u8_INT0)
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	88 23       	and	r24, r24
    192a:	09 f0       	breq	.+2      	; 0x192e <EXTI_u8SetSenseControl+0x22>
    192c:	5f c0       	rjmp	.+190    	; 0x19ec <EXTI_u8SetSenseControl+0xe0>
	{
		switch(Copy_u8Sense)
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	39 87       	std	Y+9, r19	; 0x09
    1936:	28 87       	std	Y+8, r18	; 0x08
    1938:	88 85       	ldd	r24, Y+8	; 0x08
    193a:	99 85       	ldd	r25, Y+9	; 0x09
    193c:	82 30       	cpi	r24, 0x02	; 2
    193e:	91 05       	cpc	r25, r1
    1940:	29 f1       	breq	.+74     	; 0x198c <EXTI_u8SetSenseControl+0x80>
    1942:	28 85       	ldd	r18, Y+8	; 0x08
    1944:	39 85       	ldd	r19, Y+9	; 0x09
    1946:	23 30       	cpi	r18, 0x03	; 3
    1948:	31 05       	cpc	r19, r1
    194a:	34 f4       	brge	.+12     	; 0x1958 <EXTI_u8SetSenseControl+0x4c>
    194c:	88 85       	ldd	r24, Y+8	; 0x08
    194e:	99 85       	ldd	r25, Y+9	; 0x09
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	91 05       	cpc	r25, r1
    1954:	61 f0       	breq	.+24     	; 0x196e <EXTI_u8SetSenseControl+0x62>
    1956:	47 c0       	rjmp	.+142    	; 0x19e6 <EXTI_u8SetSenseControl+0xda>
    1958:	28 85       	ldd	r18, Y+8	; 0x08
    195a:	39 85       	ldd	r19, Y+9	; 0x09
    195c:	23 30       	cpi	r18, 0x03	; 3
    195e:	31 05       	cpc	r19, r1
    1960:	21 f1       	breq	.+72     	; 0x19aa <EXTI_u8SetSenseControl+0x9e>
    1962:	88 85       	ldd	r24, Y+8	; 0x08
    1964:	99 85       	ldd	r25, Y+9	; 0x09
    1966:	84 30       	cpi	r24, 0x04	; 4
    1968:	91 05       	cpc	r25, r1
    196a:	71 f1       	breq	.+92     	; 0x19c8 <EXTI_u8SetSenseControl+0xbc>
    196c:	3c c0       	rjmp	.+120    	; 0x19e6 <EXTI_u8SetSenseControl+0xda>
		{
		case LOW_LEVEL : 	CLR_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
    196e:	a5 e5       	ldi	r26, 0x55	; 85
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e5 e5       	ldi	r30, 0x55	; 85
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8d 7f       	andi	r24, 0xFD	; 253
    197a:	8c 93       	st	X, r24
    197c:	a5 e5       	ldi	r26, 0x55	; 85
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e5 e5       	ldi	r30, 0x55	; 85
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8e 7f       	andi	r24, 0xFE	; 254
    1988:	8c 93       	st	X, r24
    198a:	bb c0       	rjmp	.+374    	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		case ON_CHANGE : 	CLR_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00); break;
    198c:	a5 e5       	ldi	r26, 0x55	; 85
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e5       	ldi	r30, 0x55	; 85
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8d 7f       	andi	r24, 0xFD	; 253
    1998:	8c 93       	st	X, r24
    199a:	a5 e5       	ldi	r26, 0x55	; 85
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e5       	ldi	r30, 0x55	; 85
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	81 60       	ori	r24, 0x01	; 1
    19a6:	8c 93       	st	X, r24
    19a8:	ac c0       	rjmp	.+344    	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		case FALLING_EDGE : SET_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
    19aa:	a5 e5       	ldi	r26, 0x55	; 85
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e5 e5       	ldi	r30, 0x55	; 85
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	82 60       	ori	r24, 0x02	; 2
    19b6:	8c 93       	st	X, r24
    19b8:	a5 e5       	ldi	r26, 0x55	; 85
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e5 e5       	ldi	r30, 0x55	; 85
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8e 7f       	andi	r24, 0xFE	; 254
    19c4:	8c 93       	st	X, r24
    19c6:	9d c0       	rjmp	.+314    	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		case RISING_EDGE :  SET_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00); break;
    19c8:	a5 e5       	ldi	r26, 0x55	; 85
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e5 e5       	ldi	r30, 0x55	; 85
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	82 60       	ori	r24, 0x02	; 2
    19d4:	8c 93       	st	X, r24
    19d6:	a5 e5       	ldi	r26, 0x55	; 85
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e5 e5       	ldi	r30, 0x55	; 85
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	81 60       	ori	r24, 0x01	; 1
    19e2:	8c 93       	st	X, r24
    19e4:	8e c0       	rjmp	.+284    	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		default : Local_u8ErrorState = NOK;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	8b c0       	rjmp	.+278    	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		}
	}
	else if(Copy_u8IntNum == EXTI_u8_INT1)
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <EXTI_u8SetSenseControl+0xe8>
    19f2:	5f c0       	rjmp	.+190    	; 0x1ab2 <EXTI_u8SetSenseControl+0x1a6>
	{
		switch(Copy_u8Sense)
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	3f 83       	std	Y+7, r19	; 0x07
    19fc:	2e 83       	std	Y+6, r18	; 0x06
    19fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1a00:	9f 81       	ldd	r25, Y+7	; 0x07
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	91 05       	cpc	r25, r1
    1a06:	29 f1       	breq	.+74     	; 0x1a52 <EXTI_u8SetSenseControl+0x146>
    1a08:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a0c:	23 30       	cpi	r18, 0x03	; 3
    1a0e:	31 05       	cpc	r19, r1
    1a10:	34 f4       	brge	.+12     	; 0x1a1e <EXTI_u8SetSenseControl+0x112>
    1a12:	8e 81       	ldd	r24, Y+6	; 0x06
    1a14:	9f 81       	ldd	r25, Y+7	; 0x07
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	91 05       	cpc	r25, r1
    1a1a:	61 f0       	breq	.+24     	; 0x1a34 <EXTI_u8SetSenseControl+0x128>
    1a1c:	47 c0       	rjmp	.+142    	; 0x1aac <EXTI_u8SetSenseControl+0x1a0>
    1a1e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a20:	3f 81       	ldd	r19, Y+7	; 0x07
    1a22:	23 30       	cpi	r18, 0x03	; 3
    1a24:	31 05       	cpc	r19, r1
    1a26:	21 f1       	breq	.+72     	; 0x1a70 <EXTI_u8SetSenseControl+0x164>
    1a28:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2c:	84 30       	cpi	r24, 0x04	; 4
    1a2e:	91 05       	cpc	r25, r1
    1a30:	71 f1       	breq	.+92     	; 0x1a8e <EXTI_u8SetSenseControl+0x182>
    1a32:	3c c0       	rjmp	.+120    	; 0x1aac <EXTI_u8SetSenseControl+0x1a0>
		{
		case LOW_LEVEL : 	CLR_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    1a34:	a5 e5       	ldi	r26, 0x55	; 85
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e5 e5       	ldi	r30, 0x55	; 85
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	87 7f       	andi	r24, 0xF7	; 247
    1a40:	8c 93       	st	X, r24
    1a42:	a5 e5       	ldi	r26, 0x55	; 85
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e5 e5       	ldi	r30, 0x55	; 85
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8b 7f       	andi	r24, 0xFB	; 251
    1a4e:	8c 93       	st	X, r24
    1a50:	58 c0       	rjmp	.+176    	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		case ON_CHANGE : 	CLR_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
    1a52:	a5 e5       	ldi	r26, 0x55	; 85
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e5 e5       	ldi	r30, 0x55	; 85
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	87 7f       	andi	r24, 0xF7	; 247
    1a5e:	8c 93       	st	X, r24
    1a60:	a5 e5       	ldi	r26, 0x55	; 85
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e5 e5       	ldi	r30, 0x55	; 85
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	84 60       	ori	r24, 0x04	; 4
    1a6c:	8c 93       	st	X, r24
    1a6e:	49 c0       	rjmp	.+146    	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		case FALLING_EDGE : SET_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    1a70:	a5 e5       	ldi	r26, 0x55	; 85
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e5 e5       	ldi	r30, 0x55	; 85
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	88 60       	ori	r24, 0x08	; 8
    1a7c:	8c 93       	st	X, r24
    1a7e:	a5 e5       	ldi	r26, 0x55	; 85
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e5 e5       	ldi	r30, 0x55	; 85
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	8b 7f       	andi	r24, 0xFB	; 251
    1a8a:	8c 93       	st	X, r24
    1a8c:	3a c0       	rjmp	.+116    	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		case RISING_EDGE :  SET_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
    1a8e:	a5 e5       	ldi	r26, 0x55	; 85
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e5 e5       	ldi	r30, 0x55	; 85
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	88 60       	ori	r24, 0x08	; 8
    1a9a:	8c 93       	st	X, r24
    1a9c:	a5 e5       	ldi	r26, 0x55	; 85
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e5 e5       	ldi	r30, 0x55	; 85
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	84 60       	ori	r24, 0x04	; 4
    1aa8:	8c 93       	st	X, r24
    1aaa:	2b c0       	rjmp	.+86     	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		default : Local_u8ErrorState = NOK;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	28 c0       	rjmp	.+80     	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		}
	}
	else if(Copy_u8IntNum == EXTI_u8_INT2)
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	82 30       	cpi	r24, 0x02	; 2
    1ab6:	19 f5       	brne	.+70     	; 0x1afe <EXTI_u8SetSenseControl+0x1f2>
	{
		switch(Copy_u8Sense)
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	3d 83       	std	Y+5, r19	; 0x05
    1ac0:	2c 83       	std	Y+4, r18	; 0x04
    1ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac6:	83 30       	cpi	r24, 0x03	; 3
    1ac8:	91 05       	cpc	r25, r1
    1aca:	31 f0       	breq	.+12     	; 0x1ad8 <EXTI_u8SetSenseControl+0x1cc>
    1acc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ace:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad0:	24 30       	cpi	r18, 0x04	; 4
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	49 f0       	breq	.+18     	; 0x1ae8 <EXTI_u8SetSenseControl+0x1dc>
    1ad6:	10 c0       	rjmp	.+32     	; 0x1af8 <EXTI_u8SetSenseControl+0x1ec>
		{
		case FALLING_EDGE : CLR_BIT(MCUCSR,MCUCSR_ISC2); break;
    1ad8:	a4 e5       	ldi	r26, 0x54	; 84
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e4 e5       	ldi	r30, 0x54	; 84
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8f 7b       	andi	r24, 0xBF	; 191
    1ae4:	8c 93       	st	X, r24
    1ae6:	0d c0       	rjmp	.+26     	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		case RISING_EDGE :  SET_BIT(MCUCSR,MCUCSR_ISC2); break;
    1ae8:	a4 e5       	ldi	r26, 0x54	; 84
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e4 e5       	ldi	r30, 0x54	; 84
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 64       	ori	r24, 0x40	; 64
    1af4:	8c 93       	st	X, r24
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		default : Local_u8ErrorState = NOK;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <EXTI_u8SetSenseControl+0x1f6>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b04:	29 96       	adiw	r28, 0x09	; 9
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <EXTI_u8EnableInt>:
uint8 EXTI_u8EnableInt(uint8 Copy_u8IntNum)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <EXTI_u8EnableInt+0x6>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <EXTI_u8EnableInt+0x8>
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    1b24:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNum)
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	3c 83       	std	Y+4, r19	; 0x04
    1b2e:	2b 83       	std	Y+3, r18	; 0x03
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	91 05       	cpc	r25, r1
    1b38:	89 f0       	breq	.+34     	; 0x1b5c <EXTI_u8EnableInt+0x46>
    1b3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3e:	22 30       	cpi	r18, 0x02	; 2
    1b40:	31 05       	cpc	r19, r1
    1b42:	a1 f0       	breq	.+40     	; 0x1b6c <EXTI_u8EnableInt+0x56>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	c1 f4       	brne	.+48     	; 0x1b7c <EXTI_u8EnableInt+0x66>
	{
	case EXTI_u8_INT0 : SET_BIT(GICR,GICR_INT0); break;
    1b4c:	ab e5       	ldi	r26, 0x5B	; 91
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	eb e5       	ldi	r30, 0x5B	; 91
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 64       	ori	r24, 0x40	; 64
    1b58:	8c 93       	st	X, r24
    1b5a:	12 c0       	rjmp	.+36     	; 0x1b80 <EXTI_u8EnableInt+0x6a>
	case EXTI_u8_INT1 : SET_BIT(GICR,GICR_INT1); break;
    1b5c:	ab e5       	ldi	r26, 0x5B	; 91
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	eb e5       	ldi	r30, 0x5B	; 91
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	80 68       	ori	r24, 0x80	; 128
    1b68:	8c 93       	st	X, r24
    1b6a:	0a c0       	rjmp	.+20     	; 0x1b80 <EXTI_u8EnableInt+0x6a>
	case EXTI_u8_INT2 : SET_BIT(GICR,GICR_INT2); break;
    1b6c:	ab e5       	ldi	r26, 0x5B	; 91
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	eb e5       	ldi	r30, 0x5B	; 91
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	80 62       	ori	r24, 0x20	; 32
    1b78:	8c 93       	st	X, r24
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <EXTI_u8EnableInt+0x6a>
	default : Local_u8ErrorState = NOK;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <EXTI_u8DisableInt>:
uint8 EXTI_u8DisableInt(uint8 Copy_u8IntNum)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <EXTI_u8DisableInt+0x6>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <EXTI_u8DisableInt+0x8>
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    1b9e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNum)
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	3c 83       	std	Y+4, r19	; 0x04
    1ba8:	2b 83       	std	Y+3, r18	; 0x03
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	89 f0       	breq	.+34     	; 0x1bd6 <EXTI_u8DisableInt+0x46>
    1bb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	31 05       	cpc	r19, r1
    1bbc:	a1 f0       	breq	.+40     	; 0x1be6 <EXTI_u8DisableInt+0x56>
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	c1 f4       	brne	.+48     	; 0x1bf6 <EXTI_u8DisableInt+0x66>
	{
	case EXTI_u8_INT0 : CLR_BIT(GICR,GICR_INT0); break;
    1bc6:	ab e5       	ldi	r26, 0x5B	; 91
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	eb e5       	ldi	r30, 0x5B	; 91
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8f 7b       	andi	r24, 0xBF	; 191
    1bd2:	8c 93       	st	X, r24
    1bd4:	12 c0       	rjmp	.+36     	; 0x1bfa <EXTI_u8DisableInt+0x6a>
	case EXTI_u8_INT1 : CLR_BIT(GICR,GICR_INT1); break;
    1bd6:	ab e5       	ldi	r26, 0x5B	; 91
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	eb e5       	ldi	r30, 0x5B	; 91
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8f 77       	andi	r24, 0x7F	; 127
    1be2:	8c 93       	st	X, r24
    1be4:	0a c0       	rjmp	.+20     	; 0x1bfa <EXTI_u8DisableInt+0x6a>
	case EXTI_u8_INT2 : CLR_BIT(GICR,GICR_INT2); break;
    1be6:	ab e5       	ldi	r26, 0x5B	; 91
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	eb e5       	ldi	r30, 0x5B	; 91
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8f 7d       	andi	r24, 0xDF	; 223
    1bf2:	8c 93       	st	X, r24
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <EXTI_u8DisableInt+0x6a>
	default : Local_u8ErrorState = NOK;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <EXTI_u8SetCallBack>:

uint8 EXTI_u8SetCallBack(uint8 Copy_u8IntNum , void (*Copy_pvCallBackFunc)(void))
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <EXTI_u8SetCallBack+0x6>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <EXTI_u8SetCallBack+0x8>
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	8a 83       	std	Y+2, r24	; 0x02
    1c18:	7c 83       	std	Y+4, r23	; 0x04
    1c1a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1c1c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	2f ef       	ldi	r18, 0xFF	; 255
    1c24:	8f 3f       	cpi	r24, 0xFF	; 255
    1c26:	92 07       	cpc	r25, r18
    1c28:	69 f0       	breq	.+26     	; 0x1c44 <EXTI_u8SetCallBack+0x3a>
	{
		EXTI_pvCallBackFunc[Copy_u8IntNum] = Copy_pvCallBackFunc;
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	fc 01       	movw	r30, r24
    1c36:	e4 59       	subi	r30, 0x94	; 148
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <EXTI_u8SetCallBack+0x3e>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <__vector_1>:
/*INT0 ISR*/
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    1c58:	1f 92       	push	r1
    1c5a:	0f 92       	push	r0
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	0f 92       	push	r0
    1c60:	11 24       	eor	r1, r1
    1c62:	2f 93       	push	r18
    1c64:	3f 93       	push	r19
    1c66:	4f 93       	push	r20
    1c68:	5f 93       	push	r21
    1c6a:	6f 93       	push	r22
    1c6c:	7f 93       	push	r23
    1c6e:	8f 93       	push	r24
    1c70:	9f 93       	push	r25
    1c72:	af 93       	push	r26
    1c74:	bf 93       	push	r27
    1c76:	ef 93       	push	r30
    1c78:	ff 93       	push	r31
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBackFunc[EXTI_u8_INT0] != NULL)
    1c82:	80 91 6c 00 	lds	r24, 0x006C
    1c86:	90 91 6d 00 	lds	r25, 0x006D
    1c8a:	2f ef       	ldi	r18, 0xFF	; 255
    1c8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c8e:	92 07       	cpc	r25, r18
    1c90:	29 f0       	breq	.+10     	; 0x1c9c <__vector_1+0x44>
	{
		EXTI_pvCallBackFunc[EXTI_u8_INT0]();
    1c92:	e0 91 6c 00 	lds	r30, 0x006C
    1c96:	f0 91 6d 00 	lds	r31, 0x006D
    1c9a:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	bf 91       	pop	r27
    1ca6:	af 91       	pop	r26
    1ca8:	9f 91       	pop	r25
    1caa:	8f 91       	pop	r24
    1cac:	7f 91       	pop	r23
    1cae:	6f 91       	pop	r22
    1cb0:	5f 91       	pop	r21
    1cb2:	4f 91       	pop	r20
    1cb4:	3f 91       	pop	r19
    1cb6:	2f 91       	pop	r18
    1cb8:	0f 90       	pop	r0
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	0f 90       	pop	r0
    1cbe:	1f 90       	pop	r1
    1cc0:	18 95       	reti

00001cc2 <__vector_2>:
/*INT0 ISR*/
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	0f 92       	push	r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	2f 93       	push	r18
    1cce:	3f 93       	push	r19
    1cd0:	4f 93       	push	r20
    1cd2:	5f 93       	push	r21
    1cd4:	6f 93       	push	r22
    1cd6:	7f 93       	push	r23
    1cd8:	8f 93       	push	r24
    1cda:	9f 93       	push	r25
    1cdc:	af 93       	push	r26
    1cde:	bf 93       	push	r27
    1ce0:	ef 93       	push	r30
    1ce2:	ff 93       	push	r31
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBackFunc[EXTI_u8_INT1] != NULL)
    1cec:	80 91 6e 00 	lds	r24, 0x006E
    1cf0:	90 91 6f 00 	lds	r25, 0x006F
    1cf4:	2f ef       	ldi	r18, 0xFF	; 255
    1cf6:	8f 3f       	cpi	r24, 0xFF	; 255
    1cf8:	92 07       	cpc	r25, r18
    1cfa:	29 f0       	breq	.+10     	; 0x1d06 <__vector_2+0x44>
	{
		EXTI_pvCallBackFunc[EXTI_u8_INT1]();
    1cfc:	e0 91 6e 00 	lds	r30, 0x006E
    1d00:	f0 91 6f 00 	lds	r31, 0x006F
    1d04:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}}
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	ff 91       	pop	r31
    1d0c:	ef 91       	pop	r30
    1d0e:	bf 91       	pop	r27
    1d10:	af 91       	pop	r26
    1d12:	9f 91       	pop	r25
    1d14:	8f 91       	pop	r24
    1d16:	7f 91       	pop	r23
    1d18:	6f 91       	pop	r22
    1d1a:	5f 91       	pop	r21
    1d1c:	4f 91       	pop	r20
    1d1e:	3f 91       	pop	r19
    1d20:	2f 91       	pop	r18
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <__vector_3>:
/*INT0 ISR*/
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    1d2c:	1f 92       	push	r1
    1d2e:	0f 92       	push	r0
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	0f 92       	push	r0
    1d34:	11 24       	eor	r1, r1
    1d36:	2f 93       	push	r18
    1d38:	3f 93       	push	r19
    1d3a:	4f 93       	push	r20
    1d3c:	5f 93       	push	r21
    1d3e:	6f 93       	push	r22
    1d40:	7f 93       	push	r23
    1d42:	8f 93       	push	r24
    1d44:	9f 93       	push	r25
    1d46:	af 93       	push	r26
    1d48:	bf 93       	push	r27
    1d4a:	ef 93       	push	r30
    1d4c:	ff 93       	push	r31
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBackFunc[EXTI_u8_INT2] != NULL)
    1d56:	80 91 70 00 	lds	r24, 0x0070
    1d5a:	90 91 71 00 	lds	r25, 0x0071
    1d5e:	2f ef       	ldi	r18, 0xFF	; 255
    1d60:	8f 3f       	cpi	r24, 0xFF	; 255
    1d62:	92 07       	cpc	r25, r18
    1d64:	29 f0       	breq	.+10     	; 0x1d70 <__vector_3+0x44>
	{
		EXTI_pvCallBackFunc[EXTI_u8_INT2]();
    1d66:	e0 91 70 00 	lds	r30, 0x0070
    1d6a:	f0 91 71 00 	lds	r31, 0x0071
    1d6e:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}}
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	ff 91       	pop	r31
    1d76:	ef 91       	pop	r30
    1d78:	bf 91       	pop	r27
    1d7a:	af 91       	pop	r26
    1d7c:	9f 91       	pop	r25
    1d7e:	8f 91       	pop	r24
    1d80:	7f 91       	pop	r23
    1d82:	6f 91       	pop	r22
    1d84:	5f 91       	pop	r21
    1d86:	4f 91       	pop	r20
    1d88:	3f 91       	pop	r19
    1d8a:	2f 91       	pop	r18
    1d8c:	0f 90       	pop	r0
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	0f 90       	pop	r0
    1d92:	1f 90       	pop	r1
    1d94:	18 95       	reti

00001d96 <GIE_voidEnableGlobal>:

#include "GIE_interface.h"
#include "GIE_reg.h"

void GIE_voidEnableGlobal(void)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG,SREG_I);
	__asm volatile("SEI");
    1d9e:	78 94       	sei
}
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG,SREG_I);
	__asm volatile("CLI");
    1dae:	f8 94       	cli
}
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <KPD_u8GetPressedKey>:
#include "KPD_interface.h"
#include "KPD_config.h"
#include "KPD_private.h"

uint8 KPD_u8GetPressedKey(void)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <KPD_u8GetPressedKey+0x6>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <KPD_u8GetPressedKey+0x8>
    1dbe:	0f 92       	push	r0
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8RowIdx,Local_u8ColIdx,Local_u8PinState,Local_u8PressedKey = KPD_u8_NO_PRESSED_KEY;
    1dc4:	8f ef       	ldi	r24, 0xFF	; 255
    1dc6:	89 83       	std	Y+1, r24	; 0x01
	static uint8 Local_u8KPDArr[ROW_NUM][COL_NUM] = KPD_KEY_ARR;
	static uint8 Local_u8ColArr[COL_NUM] = {KPD_u8_C0_PIN,KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN};
	static uint8 Local_u8RowArr[ROW_NUM] = {KPD_u8_R0_PIN,KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN};

	/*Activate columns*/
	for(Local_u8ColIdx = 0; Local_u8ColIdx < COL_NUM ;Local_u8ColIdx++)
    1dc8:	1a 82       	std	Y+2, r1	; 0x02
    1dca:	5e c0       	rjmp	.+188    	; 0x1e88 <KPD_u8GetPressedKey+0xd2>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KPD_u8_COL_PORT,Local_u8ColArr[Local_u8ColIdx],DIO_u8_PIN_LOW);
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	88 2f       	mov	r24, r24
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	ea 58       	subi	r30, 0x8A	; 138
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	90 81       	ld	r25, Z
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	69 2f       	mov	r22, r25
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>

		/*Read the rows*/
		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM;Local_u8RowIdx++)
    1de4:	1b 82       	std	Y+3, r1	; 0x03
    1de6:	3d c0       	rjmp	.+122    	; 0x1e62 <KPD_u8GetPressedKey+0xac>
		{
			/*Read the current row*/
			DIO_u8ReadPinValue(KPD_u8_ROW_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	fc 01       	movw	r30, r24
    1df0:	ee 58       	subi	r30, 0x8E	; 142
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	90 81       	ld	r25, Z
    1df6:	9e 01       	movw	r18, r28
    1df8:	2c 5f       	subi	r18, 0xFC	; 252
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	69 2f       	mov	r22, r25
    1e00:	a9 01       	movw	r20, r18
    1e02:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_u8ReadPinValue>

			if(DIO_u8_PIN_LOW == Local_u8PinState)
    1e06:	8c 81       	ldd	r24, Y+4	; 0x04
    1e08:	88 23       	and	r24, r24
    1e0a:	41 f5       	brne	.+80     	; 0x1e5c <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColIdx];
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	48 2f       	mov	r20, r24
    1e10:	50 e0       	ldi	r21, 0x00	; 0
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	ca 01       	movw	r24, r20
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	82 0f       	add	r24, r18
    1e24:	93 1f       	adc	r25, r19
    1e26:	fc 01       	movw	r30, r24
    1e28:	e6 58       	subi	r30, 0x86	; 134
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	80 81       	ld	r24, Z
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	0f c0       	rjmp	.+30     	; 0x1e50 <KPD_u8GetPressedKey+0x9a>

				/*Wait until the key is released*/
				while(DIO_u8_PIN_LOW == Local_u8PinState)
				{
					DIO_u8ReadPinValue(KPD_u8_ROW_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	88 2f       	mov	r24, r24
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	fc 01       	movw	r30, r24
    1e3a:	ee 58       	subi	r30, 0x8E	; 142
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	90 81       	ld	r25, Z
    1e40:	9e 01       	movw	r18, r28
    1e42:	2c 5f       	subi	r18, 0xFC	; 252
    1e44:	3f 4f       	sbci	r19, 0xFF	; 255
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	69 2f       	mov	r22, r25
    1e4a:	a9 01       	movw	r20, r18
    1e4c:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_u8ReadPinValue>
			if(DIO_u8_PIN_LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColIdx];

				/*Wait until the key is released*/
				while(DIO_u8_PIN_LOW == Local_u8PinState)
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	88 23       	and	r24, r24
    1e54:	71 f3       	breq	.-36     	; 0x1e32 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8ReadPinValue(KPD_u8_ROW_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
				}

				return Local_u8PressedKey;
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	8d 83       	std	Y+5, r24	; 0x05
    1e5a:	1c c0       	rjmp	.+56     	; 0x1e94 <KPD_u8GetPressedKey+0xde>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KPD_u8_COL_PORT,Local_u8ColArr[Local_u8ColIdx],DIO_u8_PIN_LOW);

		/*Read the rows*/
		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM;Local_u8RowIdx++)
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	8f 5f       	subi	r24, 0xFF	; 255
    1e60:	8b 83       	std	Y+3, r24	; 0x03
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	84 30       	cpi	r24, 0x04	; 4
    1e66:	08 f4       	brcc	.+2      	; 0x1e6a <KPD_u8GetPressedKey+0xb4>
    1e68:	bf cf       	rjmp	.-130    	; 0x1de8 <KPD_u8GetPressedKey+0x32>

				return Local_u8PressedKey;
			}
		}
		/*DeActivate the current column*/
		DIO_u8SetPinValue(KPD_u8_COL_PORT,Local_u8ColArr[Local_u8ColIdx],DIO_u8_PIN_HIGH);
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	88 2f       	mov	r24, r24
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	fc 01       	movw	r30, r24
    1e72:	ea 58       	subi	r30, 0x8A	; 138
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	90 81       	ld	r25, Z
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	69 2f       	mov	r22, r25
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
	static uint8 Local_u8KPDArr[ROW_NUM][COL_NUM] = KPD_KEY_ARR;
	static uint8 Local_u8ColArr[COL_NUM] = {KPD_u8_C0_PIN,KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN};
	static uint8 Local_u8RowArr[ROW_NUM] = {KPD_u8_R0_PIN,KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN};

	/*Activate columns*/
	for(Local_u8ColIdx = 0; Local_u8ColIdx < COL_NUM ;Local_u8ColIdx++)
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	8f 5f       	subi	r24, 0xFF	; 255
    1e86:	8a 83       	std	Y+2, r24	; 0x02
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	84 30       	cpi	r24, 0x04	; 4
    1e8c:	08 f4       	brcc	.+2      	; 0x1e90 <KPD_u8GetPressedKey+0xda>
    1e8e:	9e cf       	rjmp	.-196    	; 0x1dcc <KPD_u8GetPressedKey+0x16>
			}
		}
		/*DeActivate the current column*/
		DIO_u8SetPinValue(KPD_u8_COL_PORT,Local_u8ColArr[Local_u8ColIdx],DIO_u8_PIN_HIGH);
	}
	return Local_u8PressedKey;
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <LED_u8TurnON>:
#include "LED_interface.h"

#include "DIO_interface.h"

//<--------------------LEDS-------------------->
uint8 LED_u8TurnON(const Led_Config_t* Copy_Pu8Object){
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <LED_u8TurnON+0x6>
    1eac:	0f 92       	push	r0
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	9b 83       	std	Y+3, r25	; 0x03
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    1eb6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8Object != NULL){
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	2f ef       	ldi	r18, 0xFF	; 255
    1ebe:	8f 3f       	cpi	r24, 0xFF	; 255
    1ec0:	92 07       	cpc	r25, r18
    1ec2:	41 f1       	breq	.+80     	; 0x1f14 <LED_u8TurnON+0x6e>
		if(Copy_Pu8Object->Local_u8Direction <= DIO_u8_LED_FORWARD){
    1ec4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	82 30       	cpi	r24, 0x02	; 2
    1ecc:	00 f5       	brcc	.+64     	; 0x1f0e <LED_u8TurnON+0x68>

			if(Copy_Pu8Object->Local_u8Direction == DIO_u8_LED_FORWARD)
    1ece:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	59 f4       	brne	.+22     	; 0x1eee <LED_u8TurnON+0x48>
				DIO_u8SetPinValue(Copy_Pu8Object->Local_u8Port,Copy_Pu8Object->Local_u8Pin,DIO_u8_PIN_HIGH);
    1ed8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eda:	fb 81       	ldd	r31, Y+3	; 0x03
    1edc:	80 81       	ld	r24, Z
    1ede:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ee2:	91 81       	ldd	r25, Z+1	; 0x01
    1ee4:	69 2f       	mov	r22, r25
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
    1eec:	15 c0       	rjmp	.+42     	; 0x1f18 <LED_u8TurnON+0x72>
			else if(Copy_Pu8Object->Local_u8Direction == DIO_u8_LED_BACKWARD)
    1eee:	ea 81       	ldd	r30, Y+2	; 0x02
    1ef0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	88 23       	and	r24, r24
    1ef6:	81 f4       	brne	.+32     	; 0x1f18 <LED_u8TurnON+0x72>
				DIO_u8SetPinValue(Copy_Pu8Object->Local_u8Port,Copy_Pu8Object->Local_u8Pin,DIO_u8_PIN_LOW);
    1ef8:	ea 81       	ldd	r30, Y+2	; 0x02
    1efa:	fb 81       	ldd	r31, Y+3	; 0x03
    1efc:	80 81       	ld	r24, Z
    1efe:	ea 81       	ldd	r30, Y+2	; 0x02
    1f00:	fb 81       	ldd	r31, Y+3	; 0x03
    1f02:	91 81       	ldd	r25, Z+1	; 0x01
    1f04:	69 2f       	mov	r22, r25
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
    1f0c:	05 c0       	rjmp	.+10     	; 0x1f18 <LED_u8TurnON+0x72>

		}else{
			Local_u8ErrorState = NOK;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <LED_u8TurnON+0x72>
		}
	}else{
		Local_u8ErrorState = NULL_POINTER;
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <LED_u8TurnOFF>:

uint8 LED_u8TurnOFF(const Led_Config_t* Copy_Pu8Object){
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	00 d0       	rcall	.+0      	; 0x1f2c <LED_u8TurnOFF+0x6>
    1f2c:	0f 92       	push	r0
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	9b 83       	std	Y+3, r25	; 0x03
    1f34:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    1f36:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8Object != NULL){
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3c:	2f ef       	ldi	r18, 0xFF	; 255
    1f3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f40:	92 07       	cpc	r25, r18
    1f42:	41 f1       	breq	.+80     	; 0x1f94 <LED_u8TurnOFF+0x6e>
		if(Copy_Pu8Object->Local_u8Direction <= DIO_u8_LED_FORWARD){
    1f44:	ea 81       	ldd	r30, Y+2	; 0x02
    1f46:	fb 81       	ldd	r31, Y+3	; 0x03
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	82 30       	cpi	r24, 0x02	; 2
    1f4c:	00 f5       	brcc	.+64     	; 0x1f8e <LED_u8TurnOFF+0x68>

			if(Copy_Pu8Object->Local_u8Direction == DIO_u8_LED_FORWARD)
    1f4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f50:	fb 81       	ldd	r31, Y+3	; 0x03
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	81 30       	cpi	r24, 0x01	; 1
    1f56:	59 f4       	brne	.+22     	; 0x1f6e <LED_u8TurnOFF+0x48>
				DIO_u8SetPinValue(Copy_Pu8Object->Local_u8Port,Copy_Pu8Object->Local_u8Pin,DIO_u8_PIN_LOW);
    1f58:	ea 81       	ldd	r30, Y+2	; 0x02
    1f5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f5c:	80 81       	ld	r24, Z
    1f5e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f60:	fb 81       	ldd	r31, Y+3	; 0x03
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	69 2f       	mov	r22, r25
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
    1f6c:	15 c0       	rjmp	.+42     	; 0x1f98 <LED_u8TurnOFF+0x72>
			else if(Copy_Pu8Object->Local_u8Direction == DIO_u8_LED_BACKWARD)
    1f6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f70:	fb 81       	ldd	r31, Y+3	; 0x03
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	88 23       	and	r24, r24
    1f76:	81 f4       	brne	.+32     	; 0x1f98 <LED_u8TurnOFF+0x72>
				DIO_u8SetPinValue(Copy_Pu8Object->Local_u8Port,Copy_Pu8Object->Local_u8Pin,DIO_u8_PIN_HIGH);
    1f78:	ea 81       	ldd	r30, Y+2	; 0x02
    1f7a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f7c:	80 81       	ld	r24, Z
    1f7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f80:	fb 81       	ldd	r31, Y+3	; 0x03
    1f82:	91 81       	ldd	r25, Z+1	; 0x01
    1f84:	69 2f       	mov	r22, r25
    1f86:	41 e0       	ldi	r20, 0x01	; 1
    1f88:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
    1f8c:	05 c0       	rjmp	.+10     	; 0x1f98 <LED_u8TurnOFF+0x72>

		}else{
			Local_u8ErrorState = NOK;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <LED_u8TurnOFF+0x72>
		}
	}else{
		Local_u8ErrorState = NULL_POINTER;
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_reg.h"

void PORT_voidInit(void){
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1fae:	ea e3       	ldi	r30, 0x3A	; 58
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
    1fb4:	e7 e3       	ldi	r30, 0x37	; 55
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 ea       	ldi	r24, 0xA0	; 160
    1fba:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1fbc:	e4 e3       	ldi	r30, 0x34	; 52
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 e8       	ldi	r24, 0x80	; 128
    1fc2:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1fc4:	e1 e3       	ldi	r30, 0x31	; 49
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 e8       	ldi	r24, 0x80	; 128
    1fca:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VAL;
    1fcc:	eb e3       	ldi	r30, 0x3B	; 59
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL;
    1fd2:	e8 e3       	ldi	r30, 0x38	; 56
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 e1       	ldi	r24, 0x10	; 16
    1fd8:	80 83       	st	Z, r24
	PORTC = PORTC_INIT_VAL;
    1fda:	e5 e3       	ldi	r30, 0x35	; 53
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	10 82       	st	Z, r1
	PORTD = PORTD_INIT_VAL;
    1fe0:	e2 e3       	ldi	r30, 0x32	; 50
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	10 82       	st	Z, r1

}
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <SPI_voidINitMaster>:
#include "SPI_interface.h"
#include "SPI_private.h"
#include "SPI_reg.h"

void SPI_voidINitMaster(void)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
	//set the microController to be master
	SET_BIT(SPCR,SPCR_MSTR);
    1ff4:	ad e2       	ldi	r26, 0x2D	; 45
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	ed e2       	ldi	r30, 0x2D	; 45
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	80 61       	ori	r24, 0x10	; 16
    2000:	8c 93       	st	X, r24

	//set the prescalar to be divisable by 16
	CLR_BIT(SPSR,SPSR_SPI2X);
    2002:	ae e2       	ldi	r26, 0x2E	; 46
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	ee e2       	ldi	r30, 0x2E	; 46
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	8e 7f       	andi	r24, 0xFE	; 254
    200e:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
    2010:	ad e2       	ldi	r26, 0x2D	; 45
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	ed e2       	ldi	r30, 0x2D	; 45
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	8d 7f       	andi	r24, 0xFD	; 253
    201c:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPR0);
    201e:	ad e2       	ldi	r26, 0x2D	; 45
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	ed e2       	ldi	r30, 0x2D	; 45
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	81 60       	ori	r24, 0x01	; 1
    202a:	8c 93       	st	X, r24

	//enable the SPI
	SET_BIT(SPCR,SPCR_SPE);
    202c:	ad e2       	ldi	r26, 0x2D	; 45
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	ed e2       	ldi	r30, 0x2D	; 45
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	80 64       	ori	r24, 0x40	; 64
    2038:	8c 93       	st	X, r24
}
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <SPI_voidInitSlave>:
void SPI_voidInitSlave(void)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	//set the microController to be slave
	CLR_BIT(SPCR,SPCR_MSTR);
    2048:	ad e2       	ldi	r26, 0x2D	; 45
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	ed e2       	ldi	r30, 0x2D	; 45
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	8f 7e       	andi	r24, 0xEF	; 239
    2054:	8c 93       	st	X, r24

	//enable the SPI
	SET_BIT(SPCR,SPCR_SPE);
    2056:	ad e2       	ldi	r26, 0x2D	; 45
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	ed e2       	ldi	r30, 0x2D	; 45
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	80 64       	ori	r24, 0x40	; 64
    2062:	8c 93       	st	X, r24
}
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <SPI_u8Transcieve>:
uint8 SPI_u8Transcieve(uint8 Copy_u8Data)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	0f 92       	push	r0
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	89 83       	std	Y+1, r24	; 0x01
	//send the data
	SPDR = Copy_u8Data;
    2076:	ef e2       	ldi	r30, 0x2F	; 47
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	80 83       	st	Z, r24

	//wait until the transfer is complete
	while(SPSR_SPIF == 0);

	//return the recieved value
	return SPDR;
    207e:	ef e2       	ldi	r30, 0x2F	; 47
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
}
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <SSD_u8Enable>:
#include "SSD_interface.h"

#include "DIO_interface.h"

//<--------------------7 SEGMENT-------------------->
uint8 SSD_u8Enable(const SSD_Config_t* Copy_Pu8Object){
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	00 d0       	rcall	.+0      	; 0x2092 <SSD_u8Enable+0x6>
    2092:	0f 92       	push	r0
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	9b 83       	std	Y+3, r25	; 0x03
    209a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    209c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8Object != NULL){
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	2f ef       	ldi	r18, 0xFF	; 255
    20a4:	8f 3f       	cpi	r24, 0xFF	; 255
    20a6:	92 07       	cpc	r25, r18
    20a8:	01 f1       	breq	.+64     	; 0x20ea <SSD_u8Enable+0x5e>
		if(Copy_Pu8Object->Local_u8Type == DIO_u8_SSD_TYPE_CATHODE)
    20aa:	ea 81       	ldd	r30, Y+2	; 0x02
    20ac:	fb 81       	ldd	r31, Y+3	; 0x03
    20ae:	87 81       	ldd	r24, Z+7	; 0x07
    20b0:	88 23       	and	r24, r24
    20b2:	59 f4       	brne	.+22     	; 0x20ca <SSD_u8Enable+0x3e>
			DIO_u8SetPinValue(Copy_Pu8Object->Local_u8EnablePort,Copy_Pu8Object->Local_u8EnablePin,DIO_u8_PIN_HIGH);
    20b4:	ea 81       	ldd	r30, Y+2	; 0x02
    20b6:	fb 81       	ldd	r31, Y+3	; 0x03
    20b8:	85 81       	ldd	r24, Z+5	; 0x05
    20ba:	ea 81       	ldd	r30, Y+2	; 0x02
    20bc:	fb 81       	ldd	r31, Y+3	; 0x03
    20be:	96 81       	ldd	r25, Z+6	; 0x06
    20c0:	69 2f       	mov	r22, r25
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
    20c8:	12 c0       	rjmp	.+36     	; 0x20ee <SSD_u8Enable+0x62>
		else if(Copy_Pu8Object->Local_u8Type == DIO_u8_SSD_TYPE_ANODE)
    20ca:	ea 81       	ldd	r30, Y+2	; 0x02
    20cc:	fb 81       	ldd	r31, Y+3	; 0x03
    20ce:	87 81       	ldd	r24, Z+7	; 0x07
    20d0:	81 30       	cpi	r24, 0x01	; 1
    20d2:	69 f4       	brne	.+26     	; 0x20ee <SSD_u8Enable+0x62>
			DIO_u8SetPinValue(Copy_Pu8Object->Local_u8EnablePort,Copy_Pu8Object->Local_u8EnablePin,DIO_u8_PIN_LOW);
    20d4:	ea 81       	ldd	r30, Y+2	; 0x02
    20d6:	fb 81       	ldd	r31, Y+3	; 0x03
    20d8:	85 81       	ldd	r24, Z+5	; 0x05
    20da:	ea 81       	ldd	r30, Y+2	; 0x02
    20dc:	fb 81       	ldd	r31, Y+3	; 0x03
    20de:	96 81       	ldd	r25, Z+6	; 0x06
    20e0:	69 2f       	mov	r22, r25
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <SSD_u8Enable+0x62>

	}else{
		Local_u8ErrorState = NULL_POINTER;
    20ea:	82 e0       	ldi	r24, 0x02	; 2
    20ec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <SSD_u8Disable>:

uint8 SSD_u8Disable(const SSD_Config_t* Copy_Pu8Object){
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <SSD_u8Disable+0x6>
    2102:	0f 92       	push	r0
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9b 83       	std	Y+3, r25	; 0x03
    210a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    210c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8Object != NULL){
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	9b 81       	ldd	r25, Y+3	; 0x03
    2112:	2f ef       	ldi	r18, 0xFF	; 255
    2114:	8f 3f       	cpi	r24, 0xFF	; 255
    2116:	92 07       	cpc	r25, r18
    2118:	01 f1       	breq	.+64     	; 0x215a <SSD_u8Disable+0x5e>
		if(Copy_Pu8Object->Local_u8Type == DIO_u8_SSD_TYPE_CATHODE)
    211a:	ea 81       	ldd	r30, Y+2	; 0x02
    211c:	fb 81       	ldd	r31, Y+3	; 0x03
    211e:	87 81       	ldd	r24, Z+7	; 0x07
    2120:	88 23       	and	r24, r24
    2122:	59 f4       	brne	.+22     	; 0x213a <SSD_u8Disable+0x3e>
			DIO_u8SetPinValue(Copy_Pu8Object->Local_u8EnablePort,Copy_Pu8Object->Local_u8EnablePin,DIO_u8_PIN_LOW);
    2124:	ea 81       	ldd	r30, Y+2	; 0x02
    2126:	fb 81       	ldd	r31, Y+3	; 0x03
    2128:	85 81       	ldd	r24, Z+5	; 0x05
    212a:	ea 81       	ldd	r30, Y+2	; 0x02
    212c:	fb 81       	ldd	r31, Y+3	; 0x03
    212e:	96 81       	ldd	r25, Z+6	; 0x06
    2130:	69 2f       	mov	r22, r25
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
    2138:	12 c0       	rjmp	.+36     	; 0x215e <SSD_u8Disable+0x62>
		else if(Copy_Pu8Object->Local_u8Type == DIO_u8_SSD_TYPE_ANODE)
    213a:	ea 81       	ldd	r30, Y+2	; 0x02
    213c:	fb 81       	ldd	r31, Y+3	; 0x03
    213e:	87 81       	ldd	r24, Z+7	; 0x07
    2140:	81 30       	cpi	r24, 0x01	; 1
    2142:	69 f4       	brne	.+26     	; 0x215e <SSD_u8Disable+0x62>
			DIO_u8SetPinValue(Copy_Pu8Object->Local_u8EnablePort,Copy_Pu8Object->Local_u8EnablePin,DIO_u8_PIN_HIGH);
    2144:	ea 81       	ldd	r30, Y+2	; 0x02
    2146:	fb 81       	ldd	r31, Y+3	; 0x03
    2148:	85 81       	ldd	r24, Z+5	; 0x05
    214a:	ea 81       	ldd	r30, Y+2	; 0x02
    214c:	fb 81       	ldd	r31, Y+3	; 0x03
    214e:	96 81       	ldd	r25, Z+6	; 0x06
    2150:	69 2f       	mov	r22, r25
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
    2158:	02 c0       	rjmp	.+4      	; 0x215e <SSD_u8Disable+0x62>
	}else{
		Local_u8ErrorState = NULL_POINTER;
    215a:	82 e0       	ldi	r24, 0x02	; 2
    215c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    215e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <SSD_u8SetNumber>:

uint8 SSD_u8SetNumber(const SSD_Config_t* Copy_Pu8Object , uint8 Copy_u8Number){
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	00 d0       	rcall	.+0      	; 0x2172 <SSD_u8SetNumber+0x6>
    2172:	00 d0       	rcall	.+0      	; 0x2174 <SSD_u8SetNumber+0x8>
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	9b 83       	std	Y+3, r25	; 0x03
    217a:	8a 83       	std	Y+2, r24	; 0x02
    217c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    217e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8Object != NULL){
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	2f ef       	ldi	r18, 0xFF	; 255
    2186:	8f 3f       	cpi	r24, 0xFF	; 255
    2188:	92 07       	cpc	r25, r18
    218a:	09 f4       	brne	.+2      	; 0x218e <SSD_u8SetNumber+0x22>
    218c:	4f c0       	rjmp	.+158    	; 0x222c <SSD_u8SetNumber+0xc0>
			if(Copy_Pu8Object->Local_u8Type <= DIO_u8_SSD_TYPE_ANODE)
    218e:	ea 81       	ldd	r30, Y+2	; 0x02
    2190:	fb 81       	ldd	r31, Y+3	; 0x03
    2192:	87 81       	ldd	r24, Z+7	; 0x07
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	08 f0       	brcs	.+2      	; 0x219a <SSD_u8SetNumber+0x2e>
    2198:	46 c0       	rjmp	.+140    	; 0x2226 <SSD_u8SetNumber+0xba>
			{
				if(Copy_u8Number <= 9){
    219a:	8c 81       	ldd	r24, Y+4	; 0x04
    219c:	8a 30       	cpi	r24, 0x0A	; 10
    219e:	08 f0       	brcs	.+2      	; 0x21a2 <SSD_u8SetNumber+0x36>
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <SSD_u8SetNumber+0xb4>

					DIO_u8SetPinValue(Copy_Pu8Object->Local_u8DataPort,Copy_Pu8Object->Local_u8PinA,GET_BIT(Copy_u8Number,0));
    21a2:	ea 81       	ldd	r30, Y+2	; 0x02
    21a4:	fb 81       	ldd	r31, Y+3	; 0x03
    21a6:	20 81       	ld	r18, Z
    21a8:	ea 81       	ldd	r30, Y+2	; 0x02
    21aa:	fb 81       	ldd	r31, Y+3	; 0x03
    21ac:	31 81       	ldd	r19, Z+1	; 0x01
    21ae:	8c 81       	ldd	r24, Y+4	; 0x04
    21b0:	98 2f       	mov	r25, r24
    21b2:	91 70       	andi	r25, 0x01	; 1
    21b4:	82 2f       	mov	r24, r18
    21b6:	63 2f       	mov	r22, r19
    21b8:	49 2f       	mov	r20, r25
    21ba:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_Pu8Object->Local_u8DataPort,Copy_Pu8Object->Local_u8PinB,GET_BIT(Copy_u8Number,1));
    21be:	ea 81       	ldd	r30, Y+2	; 0x02
    21c0:	fb 81       	ldd	r31, Y+3	; 0x03
    21c2:	30 81       	ld	r19, Z
    21c4:	ea 81       	ldd	r30, Y+2	; 0x02
    21c6:	fb 81       	ldd	r31, Y+3	; 0x03
    21c8:	22 81       	ldd	r18, Z+2	; 0x02
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	86 95       	lsr	r24
    21ce:	98 2f       	mov	r25, r24
    21d0:	91 70       	andi	r25, 0x01	; 1
    21d2:	83 2f       	mov	r24, r19
    21d4:	62 2f       	mov	r22, r18
    21d6:	49 2f       	mov	r20, r25
    21d8:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_Pu8Object->Local_u8DataPort,Copy_Pu8Object->Local_u8PinC,GET_BIT(Copy_u8Number,2));
    21dc:	ea 81       	ldd	r30, Y+2	; 0x02
    21de:	fb 81       	ldd	r31, Y+3	; 0x03
    21e0:	30 81       	ld	r19, Z
    21e2:	ea 81       	ldd	r30, Y+2	; 0x02
    21e4:	fb 81       	ldd	r31, Y+3	; 0x03
    21e6:	23 81       	ldd	r18, Z+3	; 0x03
    21e8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ea:	86 95       	lsr	r24
    21ec:	86 95       	lsr	r24
    21ee:	98 2f       	mov	r25, r24
    21f0:	91 70       	andi	r25, 0x01	; 1
    21f2:	83 2f       	mov	r24, r19
    21f4:	62 2f       	mov	r22, r18
    21f6:	49 2f       	mov	r20, r25
    21f8:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_Pu8Object->Local_u8DataPort,Copy_Pu8Object->Local_u8PinD,GET_BIT(Copy_u8Number,3));
    21fc:	ea 81       	ldd	r30, Y+2	; 0x02
    21fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2200:	30 81       	ld	r19, Z
    2202:	ea 81       	ldd	r30, Y+2	; 0x02
    2204:	fb 81       	ldd	r31, Y+3	; 0x03
    2206:	24 81       	ldd	r18, Z+4	; 0x04
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	86 95       	lsr	r24
    220c:	86 95       	lsr	r24
    220e:	86 95       	lsr	r24
    2210:	98 2f       	mov	r25, r24
    2212:	91 70       	andi	r25, 0x01	; 1
    2214:	83 2f       	mov	r24, r19
    2216:	62 2f       	mov	r22, r18
    2218:	49 2f       	mov	r20, r25
    221a:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
    221e:	08 c0       	rjmp	.+16     	; 0x2230 <SSD_u8SetNumber+0xc4>

				}else{
					Local_u8ErrorState = BIG_NUM;
    2220:	84 e0       	ldi	r24, 0x04	; 4
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	05 c0       	rjmp	.+10     	; 0x2230 <SSD_u8SetNumber+0xc4>
				}
			}else{
				Local_u8ErrorState = NOK;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	89 83       	std	Y+1, r24	; 0x01
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <SSD_u8SetNumber+0xc4>
			}
	}else{
		Local_u8ErrorState = NULL_POINTER;
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2230:	89 81       	ldd	r24, Y+1	; 0x01
}
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <SW_u8GetState>:

#include "DIO_interface.h"


//<--------------------SWITCH-------------------->
uint8 SW_u8GetState(const SW_Config_t* Copy_Pu8Object,uint8* Copy_Pu8State){
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	00 d0       	rcall	.+0      	; 0x2246 <SW_u8GetState+0x6>
    2246:	00 d0       	rcall	.+0      	; 0x2248 <SW_u8GetState+0x8>
    2248:	00 d0       	rcall	.+0      	; 0x224a <SW_u8GetState+0xa>
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	9c 83       	std	Y+4, r25	; 0x04
    2250:	8b 83       	std	Y+3, r24	; 0x03
    2252:	7e 83       	std	Y+6, r23	; 0x06
    2254:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Local_u8ErrorState = OK;
    2256:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8Object != NULL && Copy_Pu8State != NULL){
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	2f ef       	ldi	r18, 0xFF	; 255
    225e:	8f 3f       	cpi	r24, 0xFF	; 255
    2260:	92 07       	cpc	r25, r18
    2262:	09 f4       	brne	.+2      	; 0x2266 <SW_u8GetState+0x26>
    2264:	3d c0       	rjmp	.+122    	; 0x22e0 <SW_u8GetState+0xa0>
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	2f ef       	ldi	r18, 0xFF	; 255
    226c:	8f 3f       	cpi	r24, 0xFF	; 255
    226e:	92 07       	cpc	r25, r18
    2270:	b9 f1       	breq	.+110    	; 0x22e0 <SW_u8GetState+0xa0>
		if(Copy_Pu8Object->Local_u8PullType <= DIO_u8_PULL_DOWN){
    2272:	eb 81       	ldd	r30, Y+3	; 0x03
    2274:	fc 81       	ldd	r31, Y+4	; 0x04
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	82 30       	cpi	r24, 0x02	; 2
    227a:	78 f5       	brcc	.+94     	; 0x22da <SW_u8GetState+0x9a>
			uint8 Local_u8ValueOfPIN;
			Local_u8ErrorState = DIO_u8ReadPinValue(Copy_Pu8Object->Local_u8Port,Copy_Pu8Object->Local_u8Pin,&Local_u8ValueOfPIN);
    227c:	eb 81       	ldd	r30, Y+3	; 0x03
    227e:	fc 81       	ldd	r31, Y+4	; 0x04
    2280:	80 81       	ld	r24, Z
    2282:	eb 81       	ldd	r30, Y+3	; 0x03
    2284:	fc 81       	ldd	r31, Y+4	; 0x04
    2286:	91 81       	ldd	r25, Z+1	; 0x01
    2288:	9e 01       	movw	r18, r28
    228a:	2e 5f       	subi	r18, 0xFE	; 254
    228c:	3f 4f       	sbci	r19, 0xFF	; 255
    228e:	69 2f       	mov	r22, r25
    2290:	a9 01       	movw	r20, r18
    2292:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_u8ReadPinValue>
    2296:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8ErrorState == OK)
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	88 23       	and	r24, r24
    229c:	19 f5       	brne	.+70     	; 0x22e4 <SW_u8GetState+0xa4>
			{
				if((Copy_Pu8Object->Local_u8PullType == DIO_u8_PULL_DOWN) && (Local_u8ValueOfPIN == DIO_u8_PIN_HIGH))
    229e:	eb 81       	ldd	r30, Y+3	; 0x03
    22a0:	fc 81       	ldd	r31, Y+4	; 0x04
    22a2:	82 81       	ldd	r24, Z+2	; 0x02
    22a4:	81 30       	cpi	r24, 0x01	; 1
    22a6:	41 f4       	brne	.+16     	; 0x22b8 <SW_u8GetState+0x78>
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	81 30       	cpi	r24, 0x01	; 1
    22ac:	29 f4       	brne	.+10     	; 0x22b8 <SW_u8GetState+0x78>
					*Copy_Pu8State = DIO_u8_SWITCH_PRESSED;
    22ae:	ed 81       	ldd	r30, Y+5	; 0x05
    22b0:	fe 81       	ldd	r31, Y+6	; 0x06
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	80 83       	st	Z, r24
    22b6:	16 c0       	rjmp	.+44     	; 0x22e4 <SW_u8GetState+0xa4>
				else if((Copy_Pu8Object->Local_u8PullType == DIO_u8_PULL_UP) && (Local_u8ValueOfPIN == DIO_u8_PIN_LOW))
    22b8:	eb 81       	ldd	r30, Y+3	; 0x03
    22ba:	fc 81       	ldd	r31, Y+4	; 0x04
    22bc:	82 81       	ldd	r24, Z+2	; 0x02
    22be:	88 23       	and	r24, r24
    22c0:	41 f4       	brne	.+16     	; 0x22d2 <SW_u8GetState+0x92>
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	88 23       	and	r24, r24
    22c6:	29 f4       	brne	.+10     	; 0x22d2 <SW_u8GetState+0x92>
					*Copy_Pu8State = DIO_u8_SWITCH_PRESSED;
    22c8:	ed 81       	ldd	r30, Y+5	; 0x05
    22ca:	fe 81       	ldd	r31, Y+6	; 0x06
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	80 83       	st	Z, r24
    22d0:	09 c0       	rjmp	.+18     	; 0x22e4 <SW_u8GetState+0xa4>
				else
					*Copy_Pu8State = DIO_u8_SWITCH_RELEASED;
    22d2:	ed 81       	ldd	r30, Y+5	; 0x05
    22d4:	fe 81       	ldd	r31, Y+6	; 0x06
    22d6:	10 82       	st	Z, r1
    22d8:	05 c0       	rjmp	.+10     	; 0x22e4 <SW_u8GetState+0xa4>
			}
		}else{
			Local_u8ErrorState = NOK;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <SW_u8GetState+0xa4>
		}
	}else{
		Local_u8ErrorState = NULL_POINTER;
    22e0:	82 e0       	ldi	r24, 0x02	; 2
    22e2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e6:	26 96       	adiw	r28, 0x06	; 6
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <TIMER0_voidInit>:
static void (*TimerOvF_pvCallBackFunc)(void) = NULL;
static void (*TimerCompareOvF_pvCallBackFunc)(void) = NULL;
static void (*ICU_pvCallBackFunc)(void) = NULL;

void TIMER0_voidInit()
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
	/*Normal Mode*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
	CLR_BIT(TCCR0,TCCR0_WGM01);
#elif Mode == PWM_Mode
	/*Pulse Wait Modulation*/
	SET_BIT(TCCR0,TCCR0_WGM00);
    2300:	a3 e5       	ldi	r26, 0x53	; 83
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e3 e5       	ldi	r30, 0x53	; 83
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	80 64       	ori	r24, 0x40	; 64
    230c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    230e:	a3 e5       	ldi	r26, 0x53	; 83
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e3 e5       	ldi	r30, 0x53	; 83
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	88 60       	ori	r24, 0x08	; 8
    231a:	8c 93       	st	X, r24

	/*Set on Top Clear on Compare*/
	CLR_BIT(TCCR0,TCCR0_COM00);
    231c:	a3 e5       	ldi	r26, 0x53	; 83
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e3 e5       	ldi	r30, 0x53	; 83
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	8f 7e       	andi	r24, 0xEF	; 239
    2328:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    232a:	a3 e5       	ldi	r26, 0x53	; 83
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e3 e5       	ldi	r30, 0x53	; 83
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	80 62       	ori	r24, 0x20	; 32
    2336:	8c 93       	st	X, r24

	//compare value = 64 for duty cycle = 25%
	OCR0 = 64;
    2338:	ec e5       	ldi	r30, 0x5C	; 92
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 e4       	ldi	r24, 0x40	; 64
    233e:	80 83       	st	Z, r24
#endif

	/*Prescalar: division by 64*/
	SET_BIT(TCCR0,TCCR0_CS00);
    2340:	a3 e5       	ldi	r26, 0x53	; 83
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e3 e5       	ldi	r30, 0x53	; 83
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	81 60       	ori	r24, 0x01	; 1
    234c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    234e:	a3 e5       	ldi	r26, 0x53	; 83
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e3 e5       	ldi	r30, 0x53	; 83
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	82 60       	ori	r24, 0x02	; 2
    235a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    235c:	a3 e5       	ldi	r26, 0x53	; 83
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e3 e5       	ldi	r30, 0x53	; 83
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	8b 7f       	andi	r24, 0xFB	; 251
    2368:	8c 93       	st	X, r24

	/*overflow interrupt enable*/
	SET_BIT(TIMSK,TIMSK_TOIE0);
    236a:	a9 e5       	ldi	r26, 0x59	; 89
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e9 e5       	ldi	r30, 0x59	; 89
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	81 60       	ori	r24, 0x01	; 1
    2376:	8c 93       	st	X, r24

}
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	08 95       	ret

0000237e <TIMER_Ovf_u8SetCallBack>:
uint8 TIMER_Ovf_u8SetCallBack(void (*Copy_pvCallBackFunc)(void),uint8 Copy_u8IsCompareMode)
{
    237e:	df 93       	push	r29
    2380:	cf 93       	push	r28
    2382:	00 d0       	rcall	.+0      	; 0x2384 <TIMER_Ovf_u8SetCallBack+0x6>
    2384:	00 d0       	rcall	.+0      	; 0x2386 <TIMER_Ovf_u8SetCallBack+0x8>
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	9b 83       	std	Y+3, r25	; 0x03
    238c:	8a 83       	std	Y+2, r24	; 0x02
    238e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    2390:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	9b 81       	ldd	r25, Y+3	; 0x03
    2396:	2f ef       	ldi	r18, 0xFF	; 255
    2398:	8f 3f       	cpi	r24, 0xFF	; 255
    239a:	92 07       	cpc	r25, r18
    239c:	09 f1       	breq	.+66     	; 0x23e0 <TIMER_Ovf_u8SetCallBack+0x62>
	{
		if(Copy_u8IsCompareMode == NORMAL_MODE)
    239e:	8c 81       	ldd	r24, Y+4	; 0x04
    23a0:	81 30       	cpi	r24, 0x01	; 1
    23a2:	39 f4       	brne	.+14     	; 0x23b2 <TIMER_Ovf_u8SetCallBack+0x34>
			TimerOvF_pvCallBackFunc = Copy_pvCallBackFunc;
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	9b 81       	ldd	r25, Y+3	; 0x03
    23a8:	90 93 8b 00 	sts	0x008B, r25
    23ac:	80 93 8a 00 	sts	0x008A, r24
    23b0:	19 c0       	rjmp	.+50     	; 0x23e4 <TIMER_Ovf_u8SetCallBack+0x66>
		else if(Copy_u8IsCompareMode == COMPARE_MODE)
    23b2:	8c 81       	ldd	r24, Y+4	; 0x04
    23b4:	88 23       	and	r24, r24
    23b6:	39 f4       	brne	.+14     	; 0x23c6 <TIMER_Ovf_u8SetCallBack+0x48>
			TimerCompareOvF_pvCallBackFunc = Copy_pvCallBackFunc;
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	90 93 8d 00 	sts	0x008D, r25
    23c0:	80 93 8c 00 	sts	0x008C, r24
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <TIMER_Ovf_u8SetCallBack+0x66>
		else if(Copy_u8IsCompareMode == ICU_INT)
    23c6:	8c 81       	ldd	r24, Y+4	; 0x04
    23c8:	82 30       	cpi	r24, 0x02	; 2
    23ca:	39 f4       	brne	.+14     	; 0x23da <TIMER_Ovf_u8SetCallBack+0x5c>
			ICU_pvCallBackFunc = Copy_pvCallBackFunc;
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	9b 81       	ldd	r25, Y+3	; 0x03
    23d0:	90 93 8f 00 	sts	0x008F, r25
    23d4:	80 93 8e 00 	sts	0x008E, r24
    23d8:	05 c0       	rjmp	.+10     	; 0x23e4 <TIMER_Ovf_u8SetCallBack+0x66>
		else
			Local_u8ErrorState = NOK;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <TIMER_Ovf_u8SetCallBack+0x66>
	}
	else
	{
		Local_u8ErrorState = NOK;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <Timer0_voidSetTimerValue>:
void Timer0_voidSetTimerValue(uint8 Copy_u8Value)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	0f 92       	push	r0
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
    2400:	e2 e5       	ldi	r30, 0x52	; 82
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	80 83       	st	Z, r24
}
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <Timer0_voidSetCompareValue>:

void Timer0_voidSetCompareValue(uint8 Copy_u8Val)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	0f 92       	push	r0
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Compare Interrupt Mode*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
    241c:	a9 e5       	ldi	r26, 0x59	; 89
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	e9 e5       	ldi	r30, 0x59	; 89
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	82 60       	ori	r24, 0x02	; 2
    2428:	8c 93       	st	X, r24

	OCR0 = Copy_u8Val;
    242a:	ec e5       	ldi	r30, 0x5C	; 92
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	80 83       	st	Z, r24
}
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <__vector_11>:


void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    243a:	1f 92       	push	r1
    243c:	0f 92       	push	r0
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	0f 92       	push	r0
    2442:	11 24       	eor	r1, r1
    2444:	2f 93       	push	r18
    2446:	3f 93       	push	r19
    2448:	4f 93       	push	r20
    244a:	5f 93       	push	r21
    244c:	6f 93       	push	r22
    244e:	7f 93       	push	r23
    2450:	8f 93       	push	r24
    2452:	9f 93       	push	r25
    2454:	af 93       	push	r26
    2456:	bf 93       	push	r27
    2458:	ef 93       	push	r30
    245a:	ff 93       	push	r31
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
	if(TimerOvF_pvCallBackFunc != NULL)
    2464:	80 91 8a 00 	lds	r24, 0x008A
    2468:	90 91 8b 00 	lds	r25, 0x008B
    246c:	2f ef       	ldi	r18, 0xFF	; 255
    246e:	8f 3f       	cpi	r24, 0xFF	; 255
    2470:	92 07       	cpc	r25, r18
    2472:	29 f0       	breq	.+10     	; 0x247e <__vector_11+0x44>
	{
		TimerOvF_pvCallBackFunc();
    2474:	e0 91 8a 00 	lds	r30, 0x008A
    2478:	f0 91 8b 00 	lds	r31, 0x008B
    247c:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	ff 91       	pop	r31
    2484:	ef 91       	pop	r30
    2486:	bf 91       	pop	r27
    2488:	af 91       	pop	r26
    248a:	9f 91       	pop	r25
    248c:	8f 91       	pop	r24
    248e:	7f 91       	pop	r23
    2490:	6f 91       	pop	r22
    2492:	5f 91       	pop	r21
    2494:	4f 91       	pop	r20
    2496:	3f 91       	pop	r19
    2498:	2f 91       	pop	r18
    249a:	0f 90       	pop	r0
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	0f 90       	pop	r0
    24a0:	1f 90       	pop	r1
    24a2:	18 95       	reti

000024a4 <__vector_10>:
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    24a4:	1f 92       	push	r1
    24a6:	0f 92       	push	r0
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	0f 92       	push	r0
    24ac:	11 24       	eor	r1, r1
    24ae:	2f 93       	push	r18
    24b0:	3f 93       	push	r19
    24b2:	4f 93       	push	r20
    24b4:	5f 93       	push	r21
    24b6:	6f 93       	push	r22
    24b8:	7f 93       	push	r23
    24ba:	8f 93       	push	r24
    24bc:	9f 93       	push	r25
    24be:	af 93       	push	r26
    24c0:	bf 93       	push	r27
    24c2:	ef 93       	push	r30
    24c4:	ff 93       	push	r31
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
	if(TimerCompareOvF_pvCallBackFunc != NULL)
    24ce:	80 91 8c 00 	lds	r24, 0x008C
    24d2:	90 91 8d 00 	lds	r25, 0x008D
    24d6:	2f ef       	ldi	r18, 0xFF	; 255
    24d8:	8f 3f       	cpi	r24, 0xFF	; 255
    24da:	92 07       	cpc	r25, r18
    24dc:	29 f0       	breq	.+10     	; 0x24e8 <__vector_10+0x44>
	{
		TimerCompareOvF_pvCallBackFunc();
    24de:	e0 91 8c 00 	lds	r30, 0x008C
    24e2:	f0 91 8d 00 	lds	r31, 0x008D
    24e6:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	ff 91       	pop	r31
    24ee:	ef 91       	pop	r30
    24f0:	bf 91       	pop	r27
    24f2:	af 91       	pop	r26
    24f4:	9f 91       	pop	r25
    24f6:	8f 91       	pop	r24
    24f8:	7f 91       	pop	r23
    24fa:	6f 91       	pop	r22
    24fc:	5f 91       	pop	r21
    24fe:	4f 91       	pop	r20
    2500:	3f 91       	pop	r19
    2502:	2f 91       	pop	r18
    2504:	0f 90       	pop	r0
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	0f 90       	pop	r0
    250a:	1f 90       	pop	r1
    250c:	18 95       	reti

0000250e <TIMER1_voidInit>:

/*----------------Timer 1-------------------*/
//timer 1 initialization
void TIMER1_voidInit()
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
	// set normal mode
	CLR_BIT(TCCR1A,0);
    2516:	af e4       	ldi	r26, 0x4F	; 79
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	ef e4       	ldi	r30, 0x4F	; 79
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	8e 7f       	andi	r24, 0xFE	; 254
    2522:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    2524:	af e4       	ldi	r26, 0x4F	; 79
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	ef e4       	ldi	r30, 0x4F	; 79
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	8d 7f       	andi	r24, 0xFD	; 253
    2530:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
    2532:	ae e4       	ldi	r26, 0x4E	; 78
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	ee e4       	ldi	r30, 0x4E	; 78
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	87 7f       	andi	r24, 0xF7	; 247
    253e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    2540:	ae e4       	ldi	r26, 0x4E	; 78
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	ee e4       	ldi	r30, 0x4E	; 78
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	8f 7e       	andi	r24, 0xEF	; 239
    254c:	8c 93       	st	X, r24

	// set prescalar to be 64
	SET_BIT(TCCR1B,TCCR1B_CS10);
    254e:	ae e4       	ldi	r26, 0x4E	; 78
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	ee e4       	ldi	r30, 0x4E	; 78
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	81 60       	ori	r24, 0x01	; 1
    255a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    255c:	ae e4       	ldi	r26, 0x4E	; 78
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	ee e4       	ldi	r30, 0x4E	; 78
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	82 60       	ori	r24, 0x02	; 2
    2568:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    256a:	ae e4       	ldi	r26, 0x4E	; 78
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	ee e4       	ldi	r30, 0x4E	; 78
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	8b 7f       	andi	r24, 0xFB	; 251
    2576:	8c 93       	st	X, r24

}
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <__vector_6>:

//timer 1 ISR
// timer 1 Capture Event
void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    257e:	1f 92       	push	r1
    2580:	0f 92       	push	r0
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	0f 92       	push	r0
    2586:	11 24       	eor	r1, r1
    2588:	2f 93       	push	r18
    258a:	3f 93       	push	r19
    258c:	4f 93       	push	r20
    258e:	5f 93       	push	r21
    2590:	6f 93       	push	r22
    2592:	7f 93       	push	r23
    2594:	8f 93       	push	r24
    2596:	9f 93       	push	r25
    2598:	af 93       	push	r26
    259a:	bf 93       	push	r27
    259c:	ef 93       	push	r30
    259e:	ff 93       	push	r31
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
	if(ICU_pvCallBackFunc != NULL)
    25a8:	80 91 8e 00 	lds	r24, 0x008E
    25ac:	90 91 8f 00 	lds	r25, 0x008F
    25b0:	2f ef       	ldi	r18, 0xFF	; 255
    25b2:	8f 3f       	cpi	r24, 0xFF	; 255
    25b4:	92 07       	cpc	r25, r18
    25b6:	29 f0       	breq	.+10     	; 0x25c2 <__vector_6+0x44>
	{
		ICU_pvCallBackFunc();
    25b8:	e0 91 8e 00 	lds	r30, 0x008E
    25bc:	f0 91 8f 00 	lds	r31, 0x008F
    25c0:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	ff 91       	pop	r31
    25c8:	ef 91       	pop	r30
    25ca:	bf 91       	pop	r27
    25cc:	af 91       	pop	r26
    25ce:	9f 91       	pop	r25
    25d0:	8f 91       	pop	r24
    25d2:	7f 91       	pop	r23
    25d4:	6f 91       	pop	r22
    25d6:	5f 91       	pop	r21
    25d8:	4f 91       	pop	r20
    25da:	3f 91       	pop	r19
    25dc:	2f 91       	pop	r18
    25de:	0f 90       	pop	r0
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	0f 90       	pop	r0
    25e4:	1f 90       	pop	r1
    25e6:	18 95       	reti

000025e8 <__vector_7>:
// timer 1 Compare Match A
void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    25e8:	1f 92       	push	r1
    25ea:	0f 92       	push	r0
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	0f 92       	push	r0
    25f0:	11 24       	eor	r1, r1
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62

}
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	0f 90       	pop	r0
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	0f 90       	pop	r0
    2604:	1f 90       	pop	r1
    2606:	18 95       	reti

00002608 <__vector_8>:
// timer 1 Compare Match B
void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
    2608:	1f 92       	push	r1
    260a:	0f 92       	push	r0
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	0f 92       	push	r0
    2610:	11 24       	eor	r1, r1
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62

}
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	0f 90       	pop	r0
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	0f 90       	pop	r0
    2624:	1f 90       	pop	r1
    2626:	18 95       	reti

00002628 <__vector_9>:
// timer 1 OverFlow
void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
    2628:	1f 92       	push	r1
    262a:	0f 92       	push	r0
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	0f 92       	push	r0
    2630:	11 24       	eor	r1, r1
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62

}
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	0f 90       	pop	r0
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	0f 90       	pop	r0
    2644:	1f 90       	pop	r1
    2646:	18 95       	reti

00002648 <Timer1_voidSetTimerValue>:

void Timer1_voidSetTimerValue(uint16 Copy_u8Value)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <Timer1_voidSetTimerValue+0x6>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u8Value;
    2656:	ec e4       	ldi	r30, 0x4C	; 76
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <Timer1_u16GetTimerValue>:

uint16 Timer1_u16GetTimerValue()
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2674:	ec e4       	ldi	r30, 0x4C	; 76
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	91 81       	ldd	r25, Z+1	; 0x01
}
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <ICU_voidINit>:



/************** ICU **************/
void ICU_voidINit(void)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
	//set rising edge as trigger
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    268a:	ae e4       	ldi	r26, 0x4E	; 78
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	ee e4       	ldi	r30, 0x4E	; 78
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	80 64       	ori	r24, 0x40	; 64
    2696:	8c 93       	st	X, r24

	//ICU interrupt enable
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2698:	a9 e5       	ldi	r26, 0x59	; 89
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e9 e5       	ldi	r30, 0x59	; 89
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	80 62       	ori	r24, 0x20	; 32
    26a4:	8c 93       	st	X, r24

}
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <ICU_u8SetTrigger>:
uint8 ICU_u8SetTrigger(uint8 Copy_u8Trigger)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <ICU_u8SetTrigger+0x6>
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <ICU_u8SetTrigger+0x8>
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    26ba:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Trigger)
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	3c 83       	std	Y+4, r19	; 0x04
    26c4:	2b 83       	std	Y+3, r18	; 0x03
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	69 f0       	breq	.+26     	; 0x26e8 <ICU_u8SetTrigger+0x3c>
    26ce:	2b 81       	ldd	r18, Y+3	; 0x03
    26d0:	3c 81       	ldd	r19, Y+4	; 0x04
    26d2:	21 30       	cpi	r18, 0x01	; 1
    26d4:	31 05       	cpc	r19, r1
    26d6:	81 f4       	brne	.+32     	; 0x26f8 <ICU_u8SetTrigger+0x4c>
	{
	case ICU_RISING_EDGE : SET_BIT(TCCR1B,TCCR1B_ICES1); break;
    26d8:	ae e4       	ldi	r26, 0x4E	; 78
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	ee e4       	ldi	r30, 0x4E	; 78
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	80 64       	ori	r24, 0x40	; 64
    26e4:	8c 93       	st	X, r24
    26e6:	0a c0       	rjmp	.+20     	; 0x26fc <ICU_u8SetTrigger+0x50>
	case ICU_FALLING_EDGE : CLR_BIT(TCCR1B,TCCR1B_ICES1); break;
    26e8:	ae e4       	ldi	r26, 0x4E	; 78
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	ee e4       	ldi	r30, 0x4E	; 78
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	8f 7b       	andi	r24, 0xBF	; 191
    26f4:	8c 93       	st	X, r24
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <ICU_u8SetTrigger+0x50>
	default : Local_u8ErrorState = NOK;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <ICU_u16GetCaptureeReading>:
uint16 ICU_u16GetCaptureeReading(void)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2714:	e6 e4       	ldi	r30, 0x46	; 70
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
}
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <ICU_voidInterruptDisable>:
void ICU_voidInterruptDisable(void)
{
    2722:	df 93       	push	r29
    2724:	cf 93       	push	r28
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    272a:	a9 e5       	ldi	r26, 0x59	; 89
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e9 e5       	ldi	r30, 0x59	; 89
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	8f 7d       	andi	r24, 0xDF	; 223
    2736:	8c 93       	st	X, r24
}
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <USART_voidInit>:
#include "UART_interface.h"
#include "UART_private.h"
#include "UART_reg.h"

void USART_voidInit()
{
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62

	//Open the Transmitter & the  reciever
	SET_BIT(UCSRB,UCSRB_RXEN);
    2746:	aa e2       	ldi	r26, 0x2A	; 42
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	ea e2       	ldi	r30, 0x2A	; 42
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	80 61       	ori	r24, 0x10	; 16
    2752:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN);
    2754:	aa e2       	ldi	r26, 0x2A	; 42
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	ea e2       	ldi	r30, 0x2A	; 42
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	88 60       	ori	r24, 0x08	; 8
    2760:	8c 93       	st	X, r24

	//Disable interrupt
	CLR_BIT(UCSRB,UCSRB_RXCIE);
    2762:	aa e2       	ldi	r26, 0x2A	; 42
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	ea e2       	ldi	r30, 0x2A	; 42
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	8f 77       	andi	r24, 0x7F	; 127
    276e:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSRB_TXCIE);
    2770:	aa e2       	ldi	r26, 0x2A	; 42
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	ea e2       	ldi	r30, 0x2A	; 42
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	8f 7b       	andi	r24, 0xBF	; 191
    277c:	8c 93       	st	X, r24

	//8 bits data
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    277e:	aa e2       	ldi	r26, 0x2A	; 42
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	ea e2       	ldi	r30, 0x2A	; 42
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	8b 7f       	andi	r24, 0xFB	; 251
    278a:	8c 93       	st	X, r24

	//register select to be 1
	//make it Asynchronous
	//no parity
	UCSRC = 0b10000110;
    278c:	e0 e4       	ldi	r30, 0x40	; 64
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	86 e8       	ldi	r24, 0x86	; 134
    2792:	80 83       	st	Z, r24

	//9600 bps
	UBRRL = 103;
    2794:	e9 e2       	ldi	r30, 0x29	; 41
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	87 e6       	ldi	r24, 0x67	; 103
    279a:	80 83       	st	Z, r24
}
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <USART_u8RecieveData>:
uint8 USART_u8RecieveData()
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC) == 0);
    27aa:	eb e2       	ldi	r30, 0x2B	; 43
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	88 23       	and	r24, r24
    27b2:	dc f7       	brge	.-10     	; 0x27aa <USART_u8RecieveData+0x8>
	return UDR;
    27b4:	ec e2       	ldi	r30, 0x2C	; 44
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z

}
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <USART_voidSendData>:
void USART_voidSendData(uint8 Copy_u8Data)
{
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	0f 92       	push	r0
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    27cc:	eb e2       	ldi	r30, 0x2B	; 43
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	82 95       	swap	r24
    27d4:	86 95       	lsr	r24
    27d6:	87 70       	andi	r24, 0x07	; 7
    27d8:	88 2f       	mov	r24, r24
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	81 70       	andi	r24, 0x01	; 1
    27de:	90 70       	andi	r25, 0x00	; 0
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	a1 f3       	breq	.-24     	; 0x27cc <USART_voidSendData+0xc>
	UDR = Copy_u8Data;
    27e4:	ec e2       	ldi	r30, 0x2C	; 44
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	80 83       	st	Z, r24
	//while(GET_BIT(UCSRA,UCSRA_TXC) == 0);
}
    27ec:	0f 90       	pop	r0
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <WDT_voidEnable>:
#define WDTCR_WDP2			2		//Watch dog Timer Prescaler 2
#define WDTCR_WDP1			1		//Watch dog Timer Prescaler 1
#define WDTCR_WDP0			0		//Watch dog Timer Prescaler 0

void WDT_voidEnable(void)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
    27fc:	a1 e4       	ldi	r26, 0x41	; 65
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e1 e4       	ldi	r30, 0x41	; 65
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	88 60       	ori	r24, 0x08	; 8
    2808:	8c 93       	st	X, r24
}
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <WDT_voidSleep>:
void WDT_voidSleep(uint8 Copy_u8Time)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	0f 92       	push	r0
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	89 83       	std	Y+1, r24	; 0x01
	WDTCR &= 0b11111000;
    281c:	a1 e4       	ldi	r26, 0x41	; 65
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e1 e4       	ldi	r30, 0x41	; 65
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	88 7f       	andi	r24, 0xF8	; 248
    2828:	8c 93       	st	X, r24
	Copy_u8Time &= 0b00000111;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	87 70       	andi	r24, 0x07	; 7
    282e:	89 83       	std	Y+1, r24	; 0x01
	WDTCR |= Copy_u8Time;
    2830:	a1 e4       	ldi	r26, 0x41	; 65
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e1 e4       	ldi	r30, 0x41	; 65
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	90 81       	ld	r25, Z
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	89 2b       	or	r24, r25
    283e:	8c 93       	st	X, r24
}
    2840:	0f 90       	pop	r0
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <WDT_voidDisable>:
void WDT_voidDisable(void)
{
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
	WDTCR = (1 << WDTCR_WDE) | (1 << WDTCR_WDTOE);
    2850:	e1 e4       	ldi	r30, 0x41	; 65
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	88 e1       	ldi	r24, 0x18	; 24
    2856:	80 83       	st	Z, r24
	WDTCR = 0;
    2858:	e1 e4       	ldi	r30, 0x41	; 65
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	10 82       	st	Z, r1
}
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <ISR>:
static uint16 StartTime = 0;
static uint16 SecondEdgeTime=0;
static uint16 ThirdEdgeTime = 0 ;
static uint8 Global_enable = 0;
void ISR()
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
	volatile static uint8 Local_u8Edge = 0;
	if(Local_u8Edge == 0)
    286c:	80 91 98 00 	lds	r24, 0x0098
    2870:	88 23       	and	r24, r24
    2872:	61 f4       	brne	.+24     	; 0x288c <ISR+0x28>
	{
		StartTime = ICU_u16GetCaptureeReading();
    2874:	0e 94 86 13 	call	0x270c	; 0x270c <ICU_u16GetCaptureeReading>
    2878:	90 93 92 00 	sts	0x0092, r25
    287c:	80 93 91 00 	sts	0x0091, r24
		Local_u8Edge++;
    2880:	80 91 98 00 	lds	r24, 0x0098
    2884:	8f 5f       	subi	r24, 0xFF	; 255
    2886:	80 93 98 00 	sts	0x0098, r24
    288a:	22 c0       	rjmp	.+68     	; 0x28d0 <ISR+0x6c>
	}
	else if(Local_u8Edge == 1)
    288c:	80 91 98 00 	lds	r24, 0x0098
    2890:	81 30       	cpi	r24, 0x01	; 1
    2892:	79 f4       	brne	.+30     	; 0x28b2 <ISR+0x4e>
	{
		SecondEdgeTime = ICU_u16GetCaptureeReading();
    2894:	0e 94 86 13 	call	0x270c	; 0x270c <ICU_u16GetCaptureeReading>
    2898:	90 93 94 00 	sts	0x0094, r25
    289c:	80 93 93 00 	sts	0x0093, r24
		ICU_u8SetTrigger(ICU_FALLING_EDGE);
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	0e 94 56 13 	call	0x26ac	; 0x26ac <ICU_u8SetTrigger>
		Local_u8Edge++;
    28a6:	80 91 98 00 	lds	r24, 0x0098
    28aa:	8f 5f       	subi	r24, 0xFF	; 255
    28ac:	80 93 98 00 	sts	0x0098, r24
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <ISR+0x6c>
	}
	else if(Local_u8Edge == 2)
    28b2:	80 91 98 00 	lds	r24, 0x0098
    28b6:	82 30       	cpi	r24, 0x02	; 2
    28b8:	59 f4       	brne	.+22     	; 0x28d0 <ISR+0x6c>
	{
		ThirdEdgeTime = ICU_u16GetCaptureeReading();
    28ba:	0e 94 86 13 	call	0x270c	; 0x270c <ICU_u16GetCaptureeReading>
    28be:	90 93 96 00 	sts	0x0096, r25
    28c2:	80 93 95 00 	sts	0x0095, r24

		ICU_voidInterruptDisable();
    28c6:	0e 94 91 13 	call	0x2722	; 0x2722 <ICU_voidInterruptDisable>
		Global_enable = 1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	80 93 97 00 	sts	0x0097, r24
	}
}
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <main>:


void main()
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	2f 97       	sbiw	r28, 0x0f	; 15
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61

	uint8 Local_u8RecievedData;
	PORT_voidInit();
    28ea:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <PORT_voidInit>
	SPI_voidInitSlave();
    28ee:	0e 94 20 10 	call	0x2040	; 0x2040 <SPI_voidInitSlave>



	while(1)
	{
		Local_u8RecievedData = SPI_u8Transcieve(2);
    28f2:	82 e0       	ldi	r24, 0x02	; 2
    28f4:	0e 94 35 10 	call	0x206a	; 0x206a <SPI_u8Transcieve>
    28f8:	8f 87       	std	Y+15, r24	; 0x0f
			if(Local_u8RecievedData == 1)
    28fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    28fc:	81 30       	cpi	r24, 0x01	; 1
    28fe:	29 f4       	brne	.+10     	; 0x290a <main+0x34>
				DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN7,DIO_u8_PIN_HIGH);
    2900:	83 e0       	ldi	r24, 0x03	; 3
    2902:	67 e0       	ldi	r22, 0x07	; 7
    2904:	41 e0       	ldi	r20, 0x01	; 1
    2906:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_u8SetPinValue>
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	aa e7       	ldi	r26, 0x7A	; 122
    2910:	b4 e4       	ldi	r27, 0x44	; 68
    2912:	8b 87       	std	Y+11, r24	; 0x0b
    2914:	9c 87       	std	Y+12, r25	; 0x0c
    2916:	ad 87       	std	Y+13, r26	; 0x0d
    2918:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291a:	6b 85       	ldd	r22, Y+11	; 0x0b
    291c:	7c 85       	ldd	r23, Y+12	; 0x0c
    291e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2920:	9e 85       	ldd	r25, Y+14	; 0x0e
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	4a e7       	ldi	r20, 0x7A	; 122
    2928:	55 e4       	ldi	r21, 0x45	; 69
    292a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	8f 83       	std	Y+7, r24	; 0x07
    2934:	98 87       	std	Y+8, r25	; 0x08
    2936:	a9 87       	std	Y+9, r26	; 0x09
    2938:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293a:	6f 81       	ldd	r22, Y+7	; 0x07
    293c:	78 85       	ldd	r23, Y+8	; 0x08
    293e:	89 85       	ldd	r24, Y+9	; 0x09
    2940:	9a 85       	ldd	r25, Y+10	; 0x0a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e8       	ldi	r20, 0x80	; 128
    2948:	5f e3       	ldi	r21, 0x3F	; 63
    294a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    294e:	88 23       	and	r24, r24
    2950:	2c f4       	brge	.+10     	; 0x295c <main+0x86>
		__ticks = 1;
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
    295a:	3f c0       	rjmp	.+126    	; 0x29da <main+0x104>
	else if (__tmp > 65535)
    295c:	6f 81       	ldd	r22, Y+7	; 0x07
    295e:	78 85       	ldd	r23, Y+8	; 0x08
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	9a 85       	ldd	r25, Y+10	; 0x0a
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	3f ef       	ldi	r19, 0xFF	; 255
    2968:	4f e7       	ldi	r20, 0x7F	; 127
    296a:	57 e4       	ldi	r21, 0x47	; 71
    296c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2970:	18 16       	cp	r1, r24
    2972:	4c f5       	brge	.+82     	; 0x29c6 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e2       	ldi	r20, 0x20	; 32
    2982:	51 e4       	ldi	r21, 0x41	; 65
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	8d 83       	std	Y+5, r24	; 0x05
    299c:	0f c0       	rjmp	.+30     	; 0x29bc <main+0xe6>
    299e:	80 e9       	ldi	r24, 0x90	; 144
    29a0:	91 e0       	ldi	r25, 0x01	; 1
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	8b 83       	std	Y+3, r24	; 0x03
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <main+0xd4>
    29ae:	9c 83       	std	Y+4, r25	; 0x04
    29b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	9e 81       	ldd	r25, Y+6	; 0x06
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	69 f7       	brne	.-38     	; 0x299e <main+0xc8>
    29c4:	96 cf       	rjmp	.-212    	; 0x28f2 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c6:	6f 81       	ldd	r22, Y+7	; 0x07
    29c8:	78 85       	ldd	r23, Y+8	; 0x08
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	9a 81       	ldd	r25, Y+2	; 0x02
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <main+0x110>
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	81 cf       	rjmp	.-254    	; 0x28f2 <main+0x1c>

000029f0 <__mulsi3>:
    29f0:	62 9f       	mul	r22, r18
    29f2:	d0 01       	movw	r26, r0
    29f4:	73 9f       	mul	r23, r19
    29f6:	f0 01       	movw	r30, r0
    29f8:	82 9f       	mul	r24, r18
    29fa:	e0 0d       	add	r30, r0
    29fc:	f1 1d       	adc	r31, r1
    29fe:	64 9f       	mul	r22, r20
    2a00:	e0 0d       	add	r30, r0
    2a02:	f1 1d       	adc	r31, r1
    2a04:	92 9f       	mul	r25, r18
    2a06:	f0 0d       	add	r31, r0
    2a08:	83 9f       	mul	r24, r19
    2a0a:	f0 0d       	add	r31, r0
    2a0c:	74 9f       	mul	r23, r20
    2a0e:	f0 0d       	add	r31, r0
    2a10:	65 9f       	mul	r22, r21
    2a12:	f0 0d       	add	r31, r0
    2a14:	99 27       	eor	r25, r25
    2a16:	72 9f       	mul	r23, r18
    2a18:	b0 0d       	add	r27, r0
    2a1a:	e1 1d       	adc	r30, r1
    2a1c:	f9 1f       	adc	r31, r25
    2a1e:	63 9f       	mul	r22, r19
    2a20:	b0 0d       	add	r27, r0
    2a22:	e1 1d       	adc	r30, r1
    2a24:	f9 1f       	adc	r31, r25
    2a26:	bd 01       	movw	r22, r26
    2a28:	cf 01       	movw	r24, r30
    2a2a:	11 24       	eor	r1, r1
    2a2c:	08 95       	ret

00002a2e <__udivmodsi4>:
    2a2e:	a1 e2       	ldi	r26, 0x21	; 33
    2a30:	1a 2e       	mov	r1, r26
    2a32:	aa 1b       	sub	r26, r26
    2a34:	bb 1b       	sub	r27, r27
    2a36:	fd 01       	movw	r30, r26
    2a38:	0d c0       	rjmp	.+26     	; 0x2a54 <__udivmodsi4_ep>

00002a3a <__udivmodsi4_loop>:
    2a3a:	aa 1f       	adc	r26, r26
    2a3c:	bb 1f       	adc	r27, r27
    2a3e:	ee 1f       	adc	r30, r30
    2a40:	ff 1f       	adc	r31, r31
    2a42:	a2 17       	cp	r26, r18
    2a44:	b3 07       	cpc	r27, r19
    2a46:	e4 07       	cpc	r30, r20
    2a48:	f5 07       	cpc	r31, r21
    2a4a:	20 f0       	brcs	.+8      	; 0x2a54 <__udivmodsi4_ep>
    2a4c:	a2 1b       	sub	r26, r18
    2a4e:	b3 0b       	sbc	r27, r19
    2a50:	e4 0b       	sbc	r30, r20
    2a52:	f5 0b       	sbc	r31, r21

00002a54 <__udivmodsi4_ep>:
    2a54:	66 1f       	adc	r22, r22
    2a56:	77 1f       	adc	r23, r23
    2a58:	88 1f       	adc	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	1a 94       	dec	r1
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <__udivmodsi4_loop>
    2a60:	60 95       	com	r22
    2a62:	70 95       	com	r23
    2a64:	80 95       	com	r24
    2a66:	90 95       	com	r25
    2a68:	9b 01       	movw	r18, r22
    2a6a:	ac 01       	movw	r20, r24
    2a6c:	bd 01       	movw	r22, r26
    2a6e:	cf 01       	movw	r24, r30
    2a70:	08 95       	ret

00002a72 <__prologue_saves__>:
    2a72:	2f 92       	push	r2
    2a74:	3f 92       	push	r3
    2a76:	4f 92       	push	r4
    2a78:	5f 92       	push	r5
    2a7a:	6f 92       	push	r6
    2a7c:	7f 92       	push	r7
    2a7e:	8f 92       	push	r8
    2a80:	9f 92       	push	r9
    2a82:	af 92       	push	r10
    2a84:	bf 92       	push	r11
    2a86:	cf 92       	push	r12
    2a88:	df 92       	push	r13
    2a8a:	ef 92       	push	r14
    2a8c:	ff 92       	push	r15
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	ca 1b       	sub	r28, r26
    2a9c:	db 0b       	sbc	r29, r27
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	09 94       	ijmp

00002aaa <__epilogue_restores__>:
    2aaa:	2a 88       	ldd	r2, Y+18	; 0x12
    2aac:	39 88       	ldd	r3, Y+17	; 0x11
    2aae:	48 88       	ldd	r4, Y+16	; 0x10
    2ab0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ab2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ab4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ab6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ab8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aba:	aa 84       	ldd	r10, Y+10	; 0x0a
    2abc:	b9 84       	ldd	r11, Y+9	; 0x09
    2abe:	c8 84       	ldd	r12, Y+8	; 0x08
    2ac0:	df 80       	ldd	r13, Y+7	; 0x07
    2ac2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ac4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ac6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ac8:	1b 81       	ldd	r17, Y+3	; 0x03
    2aca:	aa 81       	ldd	r26, Y+2	; 0x02
    2acc:	b9 81       	ldd	r27, Y+1	; 0x01
    2ace:	ce 0f       	add	r28, r30
    2ad0:	d1 1d       	adc	r29, r1
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	ed 01       	movw	r28, r26
    2ade:	08 95       	ret

00002ae0 <_exit>:
    2ae0:	f8 94       	cli

00002ae2 <__stop_program>:
    2ae2:	ff cf       	rjmp	.-2      	; 0x2ae2 <__stop_program>
