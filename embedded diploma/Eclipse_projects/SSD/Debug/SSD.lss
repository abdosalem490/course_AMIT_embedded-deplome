
SSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000408  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000850  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include"MATH_BTT.h"
#include<avr/io.h>
#include<util/delay.h>
void SSD_SetNumber(unsigned char Number);
int main(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	unsigned char Counter =0;
  76:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(DDRA,4);
  78:	aa e3       	ldi	r26, 0x3A	; 58
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	ea e3       	ldi	r30, 0x3A	; 58
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	80 61       	ori	r24, 0x10	; 16
  84:	8c 93       	st	X, r24
	SET_BIT(DDRA,5);
  86:	aa e3       	ldi	r26, 0x3A	; 58
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	ea e3       	ldi	r30, 0x3A	; 58
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 62       	ori	r24, 0x20	; 32
  92:	8c 93       	st	X, r24
	SET_BIT(DDRA,6);
  94:	aa e3       	ldi	r26, 0x3A	; 58
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	ea e3       	ldi	r30, 0x3A	; 58
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	8c 93       	st	X, r24
	SET_BIT(DDRA,7);
  a2:	aa e3       	ldi	r26, 0x3A	; 58
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	ea e3       	ldi	r30, 0x3A	; 58
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	8c 93       	st	X, r24

	SET_BIT(DDRB,1);
  b0:	a7 e3       	ldi	r26, 0x37	; 55
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e7 e3       	ldi	r30, 0x37	; 55
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	8c 93       	st	X, r24
	CLR_BIT(DDRB,2);
  be:	a7 e3       	ldi	r26, 0x37	; 55
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	e7 e3       	ldi	r30, 0x37	; 55
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	8c 93       	st	X, r24

	SET_BIT(PORTB,1);
  cc:	a8 e3       	ldi	r26, 0x38	; 56
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	e8 e3       	ldi	r30, 0x38	; 56
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	8c 93       	st	X, r24
  da:	03 c0       	rjmp	.+6      	; 0xe2 <main+0x76>
	for(;Counter < 100 ; Counter++){
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	89 83       	std	Y+1, r24	; 0x01
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	84 36       	cpi	r24, 0x64	; 100
  e6:	d0 f3       	brcs	.-12     	; 0xdc <main+0x70>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0

	}

}
  ec:	0f 90       	pop	r0
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	08 95       	ret

000000f4 <SSD_SetNumber>:
void SSD_SetNumber(unsigned char Number){
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	0f 92       	push	r0
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	89 83       	std	Y+1, r24	; 0x01
	ASSIGN_BIT(PORTA,4,GET_BIT(Number,0));
 100:	ab e3       	ldi	r26, 0x3B	; 59
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	eb e3       	ldi	r30, 0x3B	; 59
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	28 2f       	mov	r18, r24
 10c:	2f 7e       	andi	r18, 0xEF	; 239
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	81 70       	andi	r24, 0x01	; 1
 116:	90 70       	andi	r25, 0x00	; 0
 118:	82 95       	swap	r24
 11a:	92 95       	swap	r25
 11c:	90 7f       	andi	r25, 0xF0	; 240
 11e:	98 27       	eor	r25, r24
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	98 27       	eor	r25, r24
 124:	82 2b       	or	r24, r18
 126:	8c 93       	st	X, r24
	ASSIGN_BIT(PORTA,5,GET_BIT(Number,1));
 128:	ab e3       	ldi	r26, 0x3B	; 59
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	eb e3       	ldi	r30, 0x3B	; 59
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	28 2f       	mov	r18, r24
 134:	2f 7d       	andi	r18, 0xDF	; 223
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	86 95       	lsr	r24
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	81 70       	andi	r24, 0x01	; 1
 140:	90 70       	andi	r25, 0x00	; 0
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	82 95       	swap	r24
 148:	92 95       	swap	r25
 14a:	90 7f       	andi	r25, 0xF0	; 240
 14c:	98 27       	eor	r25, r24
 14e:	80 7f       	andi	r24, 0xF0	; 240
 150:	98 27       	eor	r25, r24
 152:	82 2b       	or	r24, r18
 154:	8c 93       	st	X, r24
	ASSIGN_BIT(PORTA,6,GET_BIT(Number,2));
 156:	ab e3       	ldi	r26, 0x3B	; 59
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	eb e3       	ldi	r30, 0x3B	; 59
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	28 2f       	mov	r18, r24
 162:	2f 7b       	andi	r18, 0xBF	; 191
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	86 95       	lsr	r24
 168:	86 95       	lsr	r24
 16a:	88 2f       	mov	r24, r24
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	81 70       	andi	r24, 0x01	; 1
 170:	90 70       	andi	r25, 0x00	; 0
 172:	00 24       	eor	r0, r0
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	07 94       	ror	r0
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	07 94       	ror	r0
 180:	98 2f       	mov	r25, r24
 182:	80 2d       	mov	r24, r0
 184:	82 2b       	or	r24, r18
 186:	8c 93       	st	X, r24
	ASSIGN_BIT(PORTA,7,GET_BIT(Number,3));
 188:	ab e3       	ldi	r26, 0x3B	; 59
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	eb e3       	ldi	r30, 0x3B	; 59
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	28 2f       	mov	r18, r24
 194:	2f 77       	andi	r18, 0x7F	; 127
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	86 95       	lsr	r24
 19a:	86 95       	lsr	r24
 19c:	86 95       	lsr	r24
 19e:	88 2f       	mov	r24, r24
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	96 95       	lsr	r25
 1a4:	98 2f       	mov	r25, r24
 1a6:	88 27       	eor	r24, r24
 1a8:	97 95       	ror	r25
 1aa:	87 95       	ror	r24
 1ac:	82 2b       	or	r24, r18
 1ae:	8c 93       	st	X, r24
}
 1b0:	0f 90       	pop	r0
 1b2:	cf 91       	pop	r28
 1b4:	df 91       	pop	r29
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
